Code: def write_file(filename, content=None): with open(filename, 'w') as f: f.write(content)
# Write content to a file

Code: def count_vowels(s): return sum(1 for c in s if c.lower() in 'aeiou')
# Count vowels in a string

Code: def reverse_string(s): return s[::-1]
# Reverse a string

Code: def sort_list(lst): return sorted(lst)
# Sort a list in ascending order

Code: def capitalize_string(s): return s.capitalize()
# Capitalize the first letter of a string

Code: def math_function(a, b): return a % b
# Perform % operation on two numbers

Code: def read_file(filename, content=None): with open(filename, 'r') as f: return f.read()
# Read the contents of a file

Code: def math_function(a, b): return a + b
# Perform + operation on two numbers

Code: def math_function(a, b): return a - b
# Perform - operation on two numbers

Code: def reverse_list(lst): return lst[::-1]
# Reverse the elements of a list

Code: def sum_list(lst): return sum(lst)
# Compute the sum of all elements in a list

Code: def remove_digits(s): return ''.join(c for c in s if not c.isdigit())
# Remove digits from a string

Code: def math_function(a, b): return a ** b
# Perform ** operation on two numbers

Code: def math_function(a, b): return a * b
# Perform * operation on two numbers

Code: def math_function(a, b): return a // b
# Perform // operation on two numbers

Code: def remove_duplicates(lst): return list(set(lst))
# Remove duplicate elements from a list

Code: def train_decision_tree(X, y):
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(X, y)
return model
# Train a Decision Tree classifier

Code: def train_random_forest(X, y):
from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(X, y)
return model
# Train a Random Forest classifier

Code: def train_svm(X, y):
from sklearn.svm import SVC
model = SVC()
model.fit(X, y)
return model
# Train an SVM classifier

Code: def train_kmeans(X, clusters):
from sklearn.cluster import KMeans
model = KMeans(n_clusters=clusters)
model.fit(X)
return model
# Train a K-Means clustering model

Code: def generate_random_series(n):
import pandas as pd
import numpy as np
return pd.Series(np.random.randn(n))
# Generate a random Pandas Series

Code: def generate_correlation_matrix(df):
return df.corr()
# Compute the correlation matrix of a DataFrame

Code: def normalize_dataframe(df):
return (df - df.min()) / (df.max() - df.min())
# Normalize a DataFrame using min-max scaling

Code: def generate_synthetic_dataset(rows, cols):
import pandas as pd
import numpy as np
data = np.random.randn(rows, cols)
return pd.DataFrame(data, columns=[f'Feature_{i}' for i in range(cols)])
# Generate a synthetic dataset with random values

Code: def split_train_test(df, target_column, test_size=0.2):
from sklearn.model_selection import train_test_split
X = df.drop(columns=[target_column])
y = df[target_column]
return train_test_split(X, y, test_size=test_size, random_state=42)
# Split dataset into training and test sets

Code: def apply_standard_scaler(df):
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
return pd.DataFrame(scaler.fit_transform(df), columns=df.columns)
# Apply StandardScaler to a DataFrame

Code: def train_logistic_regression(X, y):
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X, y)
return model
# Train a Logistic Regression model

Code: def train_knn(X, y, k=5):
from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=k)
model.fit(X, y)
return model
# Train a K-Nearest Neighbors (KNN) model

Code: def train_naive_bayes(X, y):
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X, y)
return model
# Train a Naive Bayes classifier

Code: def train_gradient_boosting(X, y):
from sklearn.ensemble import GradientBoostingClassifier
model = GradientBoostingClassifier()
model.fit(X, y)
return model
# Train a Gradient Boosting classifier

Code: def train_xgboost(X, y):
from xgboost import XGBClassifier
model = XGBClassifier()
model.fit(X, y)
return model
# Train an XGBoost classifier

Code: def get_dataframe_summary(df):
return df.describe()
# Get summary statistics of a DataFrame

Code: def check_missing_values(df):
return df.isnull().sum()
# Check for missing values in a DataFrame

Code: def drop_missing_values(df):
return df.dropna()
# Drop rows with missing values in a DataFrame

Code: def fill_missing_values(df, value):
return df.fillna(value)
# Fill missing values in a DataFrame with a specified value

Code: def encode_categorical_features(df):
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
return df.apply(lambda col: encoder.fit_transform(col) if col.dtype == 'object' else col)
# Encode categorical features using Label Encoding

Code: def apply_one_hot_encoding(df, column):
return pd.get_dummies(df, columns=[column])
# Apply one-hot encoding to a categorical column

Code: def drop_outliers(df, threshold=1.5):
from scipy.stats import zscore
return df[(abs(zscore(df.select_dtypes(include=['number']))) < threshold).all(axis=1)]
# Remove outliers based on Z-score

Code: def convert_dates(df, column):
df[column] = pd.to_datetime(df[column])
return df
# Convert a column to datetime format

Code: def extract_date_features(df, column):
df['year'] = df[column].dt.year
df['month'] = df[column].dt.month
df['day'] = df[column].dt.day
return df
# Extract year, month, and day from a datetime column

Code: def merge_dataframes(df1, df2, key):
return df1.merge(df2, on=key)
# Merge two DataFrames on a common key

Code: def groupby_aggregate(df, group_col, agg_col, agg_func):
return df.groupby(group_col)[agg_col].agg(agg_func)
# Group by a column and apply an aggregation function

Code: def train_pca(X, components):
from sklearn.decomposition import PCA
model = PCA(n_components=components)
return model.fit_transform(X)
# Perform PCA for dimensionality reduction

Code: def scale_features(df):
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
return pd.DataFrame(scaler.fit_transform(df), columns=df.columns)
# Scale features using MinMaxScaler

Code: def get_ip_address():
import socket
return socket.gethostbyname(socket.gethostname())
# Get the IP address of the machine

Code: def ping_website(url):
import os
return os.system(f"ping -c 1 {url}") == 0
# Ping a website to check if it's online

Code: def hash_text_sha256(text):
import hashlib
return hashlib.sha256(text.encode()).hexdigest()
# Generate SHA-256 hash of a text

Code: def encrypt_text(text, key):
from cryptography.fernet import Fernet
cipher = Fernet(key)
return cipher.encrypt(text.encode()).decode()
# Encrypt a text using Fernet encryption

Code: def decrypt_text(encrypted_text, key):
from cryptography.fernet import Fernet
cipher = Fernet(key)
return cipher.decrypt(encrypted_text.encode()).decode()
# Decrypt a text using Fernet encryption

Code: def generate_fernet_key():
from cryptography.fernet import Fernet
return Fernet.generate_key().decode()
# Generate a key for Fernet encryption

Code: def fetch_webpage(url):
import requests
return requests.get(url).text
# Fetch the HTML content of a webpage

Code: def extract_links(html):
from bs4 import BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')
return [a['href'] for a in soup.find_all('a', href=True)]
# Extract all links from an HTML page

Code: def get_meta_tags(url):
from bs4 import BeautifulSoup
import requests
page = requests.get(url).text
soup = BeautifulSoup(page, 'html.parser')
return {meta['name']: meta['content'] for meta in soup.find_all('meta', attrs={'name': True})}
# Extract meta tags from a webpage

Code: def download_file(url, filename):
import requests
with open(filename, 'wb') as file:
file.write(requests.get(url).content)
# Download a file from a URL

Code: def get_system_info():
import platform
return {
"OS": platform.system(),
"Version": platform.version(),
"Architecture": platform.architecture(),
}
# Get system information like OS, version, and architecture

Code: def list_directory_contents(path="."):
import os
return os.listdir(path)
# List the contents of a directory

Code: def check_file_exists(filepath):
import os
return os.path.exists(filepath)
# Check if a file exists in the system

Code: def get_file_size(filepath):
import os
return os.path.getsize(filepath)
# Get the size of a file in bytes

Code: def rename_file(old_name, new_name):
import os
os.rename(old_name, new_name)
# Rename a file in the system

Code: def delete_file(filepath):
import os
if os.path.exists(filepath):
os.remove(filepath)
# Delete a file from the system

Code: def resize_image(image_path, width, height, output_path):
from PIL import Image
img = Image.open(image_path)
img = img.resize((width, height))
img.save(output_path)
# Resize an image to specified dimensions

Code: def convert_image_to_grayscale(image_path, output_path):
from PIL import Image
img = Image.open(image_path).convert('L')
img.save(output_path)
# Convert an image to grayscale

Code: def detect_faces(image_path):
import cv2
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
img = cv2.imread(image_path)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
return face_cascade.detectMultiScale(gray, 1.1, 4)
# Detect faces in an image using OpenCV

Code: def generate_qr_code(data, filename):
import qrcode
img = qrcode.make(data)
img.save(filename)
# Generate a QR code from text data

Code: def read_qr_code(image_path):
import cv2
detector = cv2.QRCodeDetector()
val, _, _ = detector.detectAndDecode(cv2.imread(image_path))
return val
# Read and decode a QR code from an image

Code: def send_email(smtp_server, port, sender, password, receiver, subject, message):
import smtplib
from email.mime.text import MIMEText
msg = MIMEText(message)
msg["Subject"] = subject
msg["From"] = sender
msg["To"] = receiver
with smtplib.SMTP_SSL(smtp_server, port) as server:
server.login(sender, password)
server.sendmail(sender, receiver, msg.as_string())
# Send an email using an SMTP server

Code: def get_current_weather(city, api_key):
import requests
url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
return requests.get(url).json()
# Fetch current weather data for a city using OpenWeather API

Code: def get_currency_exchange_rate(base_currency, target_currency, api_key):
import requests
url = f"https://open.er-api.com/v6/latest/{base_currency}?apikey={api_key}"
return requests.get(url).json()["rates"].get(target_currency, None)
# Fetch currency exchange rate using an API

Code: def extract_text_from_pdf(pdf_path):
import PyPDF2
with open(pdf_path, "rb") as file:
reader = PyPDF2.PdfReader(file)
return " ".join([page.extract_text() for page in reader.pages if page.extract_text()])
# Extract text from a PDF file

Code: def convert_text_to_speech(text, output_file):
from gtts i

Code: def generate_bitcoin_address():
from bitcoinlib.keys import Key
return Key().address()
# Generate a new Bitcoin address

Code: def get_bitcoin_price():
import requests
return requests.get("https://api.coindesk.com/v1/bpi/currentprice/BTC.json").json()["bpi"]["USD"]["rate"]
# Fetch the current price of Bitcoin in USD

Code: def mine_block(previous_hash, transactions, difficulty=4):
import hashlib, time
nonce = 0
while True:
block_data = f"{previous_hash}{transactions}{nonce}".encode()
hash_value = hashlib.sha256(block_data).hexdigest()
if hash_value[:difficulty] == "0" * difficulty:
return {"hash": hash_value, "nonce": nonce, "timestamp": time.time()}
nonce += 1
# Simulate mining a new block in a blockchain

Code: def create_nft(name, description, image_url):
return {"name": name, "description": description, "image": image_url}
# Create a simple NFT metadata dictionary

Code: def generate_maze(size):
import numpy as np
return np.random.choice([0, 1], size=(size, size), p=[0.7, 0.3])
# Generate a random maze using a NumPy array

Code: def play_sound(file_path):
import pygame
pygame.mixer.init()
pygame.mixer.music.load(file_path)
pygame.mixer.music.play()
# Play a sound file using pygame

Code: def generate_game_map(width, height):
import random
return [[random.choice(["G", "W", "M"]) for _ in range(width)] for _ in range(height)]
# Generate a simple game map with Grass (G), Water (W), and Mountains (M)

Code: def get_joystick_input():
import pygame
pygame.init()
joystick = pygame.joystick.Joystick(0)
joystick.init()
return joystick.get_axis(0), joystick.get_axis(1)
# Get joystick input using pygame

Code: def get_sensor_data():
import random
return {"temperature": random.uniform(15, 30), "humidity": random.uniform(30, 70)}
# Simulate IoT sensor data (temperature & humidity)

Code: def control_led(state):
import RPi.GPIO as GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setup(18, GPIO.OUT)
GPIO.output(18, GPIO.HIGH if state else GPIO.LOW)
# Control an LED on a Raspberry Pi

Code: def get_robot_position():
import random
return {"x": random.randint(0, 10), "y": random.randint(0, 10)}
# Simulate getting a robot’s position in a 2D grid

Code: def move_robot(direction):
return f"Moving {direction}"
# Simulate moving a robot in a given direction

Code: def scan_wifi_networks():
import subprocess
return subprocess.check_output(["nmcli", "-t", "-f", "SSID", "dev", "wifi"]).decode().split("\n")
# Scan available WiFi networks

Code: def detect_malware(file_path):
import hashlib
hash_value = hashlib.md5(open(file_path, "rb").read()).hexdigest()
return hash_value in ["known_malware_hash_1", "known_malware_hash_2"]
# Check if a file's hash matches known malware signatures

Code: def detect_keylogger():
import psutil
return any(proc.name() in ["keylogger.exe", "spyware.exe"] for proc in psutil.process_iter())
# Check for keylogger processes running on the system

Code: def generate_captcha():
import captcha.image
image = captcha.image.ImageCaptcha()
text = str(random.randint(1000, 9999))
image.write(text, "captcha.png")
return text
# Generate a CAPTCHA image

Code: def plot_bar_chart(data, labels):
import matplotlib.pyplot as plt
plt.bar(labels, data)
plt.show()
# Plot a bar chart with given data

Code: def plot_line_chart(x, y):
import matplotlib.pyplot as plt
plt.plot(x, y)
plt.show()
# Plot a line chart

Code: def plot_pie_chart(labels, values):
import matplotlib.pyplot as plt
plt.pie(values, labels=labels, autopct="%1.1f%%")
plt.show()
# Plot a pie chart

Code: def detect_sentiment(text):
from textblob import TextBlob
return TextBlob(text).sentiment.polarity
# Perform sentiment analysis on a text

Code: def generate_text_summary(text, num_sentences=3):
from gensim.summarization import summarize
return summarize(text, word_count=num_sentences)
# Generate a summary of a given text

Code: def detect_named_entities(text):
import spacy
nlp = spacy.load("en_core_web_sm")
doc = nlp(text)
return [(ent.text, ent.label_) for ent in doc.ents]
# Extract named entities from text

Code: def translate_text(text, target_lang="fr"):
from deep_translator import GoogleTranslator
return GoogleTranslator(source="auto", target=target_lang).translate(text)
# Translate text into another language

Code: def generate_fake_name():
from faker import Faker
fake = Faker()
return fake.name()
# Generate a random fake name

Code: def generate_fake_profile():
from faker import Faker
fake = Faker()
return fake.profile()
# Generate a random fake user profile

Code: def generate_fake_company():
from faker import Faker
fake = Faker()
return fake.company()
# Generate a random fake company name

Code: def check_url_safety(url):
import requests
return requests.get(f"https://safebrowsing.googleapis.com/v4/threatMatches:find?url={url}").json()
# Check if a URL is safe using Google Safe Browsing API

Code: def generate_uuid():
import uuid
return str(uuid.uuid4())
# Generate a unique identifier (UUID)

Code: def get_moon_phase():
import ephem
return ephem.Moon().phase
# Get the current phase of the moon

Code: def get_earthquake_data():
import requests
return requests.get("https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson").json()
# Fetch real-time earthquake data

Code: def get_astronomy_picture_of_the_day(api_key):
import requests
return requests.get(f"https://api.nasa.gov/planetary/apod?api_key={api_key}").json()
# Fetch NASA's Astronomy Picture of the Day

Code: def get_near_earth_objects(api_key):
import requests
return requests.get(f"https://api.nasa.gov/neo/rest/v1/feed?api_key={api_key}").json()
# Get information about near-Earth asteroids

Code: def scrape_wikipedia_summary(topic):
import wikipedia
return wikipedia.summary(topic)
# Fetch a summary of a topic from Wikipedia

Code: def get_random_wikipedia_page():
import wikipedia
return wikipedia.random()
# Get a random Wikipedia page

Code: def create_python_virtual_env(env_name):
import os
os.system(f"python -m venv {env_name}")
# Create a Python virtual environment

Code: def install_python_package(package_name):
import os
os.system(f"pip install {package_name}")
# Install a Python package using pip

Code: def run_shell_command(command):
import subprocess
return subprocess.getoutput(command)
# Run a shell command and return the output

Code: def get_public_ip():
import requests
return requests.get("https://api64.ipify.org?format=json").json()["ip"]
# Get the public IP address of the system

Code: def get_wifi_passwords():
import os
return os.popen("netsh wlan show profile key=clear").read()
# Retrieve saved WiFi passwords (Windows only)

Code: def create_flask_server():
return '''from flask import Flask
app = Flask(__name__)
@app.route("/")
def home():
return "Hello, World!"
app.run()'''
# Generate a simple Flask server code

Code: def is_perfect_square(n): return (n ** 0.5).is_integer()
# Check if a number is a perfect square

Code: def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))
# Check if a number is prime

Code: def nth_fibonacci(n, memo={0: 0, 1: 1}):
    if n in memo: return memo[n]
    memo[n] = nth_fibonacci(n - 1, memo) + nth_fibonacci(n - 2, memo)
    return memo[n]
# Find the nth Fibonacci number using memoization

Code: def generate_fibonacci_series(n): 
    fib = [0, 1]
    for _ in range(n - 2): fib.append(fib[-1] + fib[-2])
    return fib
# Generate a Fibonacci sequence of n terms

Code: def gcd(a, b): return a if b == 0 else gcd(b, a % b)
# Find the Greatest Common Divisor (GCD) using recursion

Code: def lcm(a, b): return abs(a * b) // gcd(a, b)
# Find the Least Common Multiple (LCM) of two numbers

Code: def prime_factors(n): 
    factors, i = [], 2
    while i * i <= n:
        if n % i: i += 1
        else: n //= i; factors.append(i)
    if n > 1: factors.append(n)
    return factors
# Find prime factors of a number

Code: def count_digits(n): return len(str(abs(n)))
# Count the number of digits in a number

Code: def reverse_number(n): return int(str(n)[::-1])
# Reverse the digits of a number

Code: def factorial(n): return 1 if n == 0 else n * factorial(n - 1)
# Compute factorial of a number

Code: def power(base, exp): return base ** exp
# Compute the power of a number

Code: def is_palindrome(s): return s == s[::-1]
# Check if a string is a palindrome

Code: def is_anagram(s1, s2): return sorted(s1) == sorted(s2)
# Check if two strings are anagrams

Code: def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')
# Remove vowels from a string

Code: def count_vowels(s): return sum(1 for c in s if c.lower() in 'aeiou')
# Count vowels in a string

Code: def count_consonants(s): return sum(1 for c in s if c.isalpha() and c.lower() not in 'aeiou')
# Count consonants in a string

Code: def reverse_string(s): return s[::-1]
# Reverse a string

Code: def capitalize_words(sentence): return sentence.title()
# Capitalize the first letter of each word in a sentence

Code: def longest_word(sentence): return max(sentence.split(), key=len)
# Find the longest word in a sentence

Code: def shortest_word(sentence): return min(sentence.split(), key=len)
# Find the shortest word in a sentence

Code: def word_count(sentence): return len(sentence.split())
# Count the number of words in a sentence

Code: def unique_words(sentence): return set(sentence.split())
# Find unique words in a sentence

Code: def remove_duplicates(lst): return list(set(lst))
# Remove duplicate elements from a list

Code: def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist]
# Flatten a nested list

Code: def merge_dicts(d1, d2): return {**d1, **d2}
# Merge two dictionaries

Code: def sort_list(lst): return sorted(lst)
# Sort a list in ascending order

Code: def binary_search(lst, target):
    left, right = 0, len(lst) - 1
    while left <= right:
        mid = (left + right) // 2
        if lst[mid] == target: return mid
        elif lst[mid] < target: left = mid + 1
        else: right = mid - 1
    return -1
# Perform binary search on a sorted list

Code: def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
# Implement Bubble Sort

Code: def quicksort(arr):
    if len(arr) <= 1: return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
# Implement Quick Sort

Code: def read_file(filename):
    with open(filename, 'r') as file:
        return file.read()
# Read content from a file

Code: def write_to_file(filename, content):
    with open(filename, 'w') as file:
        file.write(content)
# Write content to a file

Code: def append_to_file(filename, content):
    with open(filename, 'a') as file:
        file.write(content + '\n')
# Append content to a file

Code: def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
# Check if a year is a leap year

Code: def celsius_to_fahrenheit(c): return (c * 9/5) + 32
# Convert Celsius to Fahrenheit

Code: def fahrenheit_to_celsius(f): return (f - 32) * 5/9
# Convert Fahrenheit to Celsius

Code: def area_of_circle(radius): import math; return math.pi * radius ** 2
# Compute the area of a circle

Code: def area_of_rectangle(length, width): return length * width
# Compute the area of a rectangle

Code: def area_of_triangle(base, height): return 0.5 * base * height
# Compute the area of a triangle

Code: def perimeter_of_rectangle(length, width): return 2 * (length + width)
# Compute the perimeter of a rectangle

Code: def perimeter_of_circle(radius): import math; return 2 * math.pi * radius
# Compute the perimeter of a circle

Code: def volume_of_sphere(radius): import math; return (4/3) * math.pi * radius ** 3
# Compute the volume of a sphere

Code: def volume_of_cube(side): return side ** 3
# Compute the volume of a cube

Code: def volume_of_cylinder(radius, height): import math; return math.pi * radius ** 2 * height
# Compute the volume of a cylinder

Code: def triangle_type(a, b, c):
    if a == b == c: return "Equilateral"
    elif a == b or b == c or a == c: return "Isosceles"
    else: return "Scalene"
# Determine the type of triangle

Code: def count_occurrences(lst, value): return lst.count(value)
# Count occurrences of an element in a list

Code: def even_numbers(lst): return [x for x in lst if x % 2 == 0]
# Filter even numbers from a list

Code: def odd_numbers(lst): return [x for x in lst if x % 2 != 0]
# Filter odd numbers from a list

Code: def intersection(lst1, lst2): return list(set(lst1) & set(lst2))
# Find common elements between two lists

Code: def difference(lst1, lst2): return list(set(lst1) - set(lst2))
# Find elements in lst1 but not in lst2

Code: def union(lst1, lst2): return list(set(lst1) | set(lst2))
# Find the union of two lists

Code: def swap_values(a, b): return b, a
# Swap two values

Code: def largest_in_list(lst): return max(lst)
# Find the largest number in a list

Code: def smallest_in_list(lst): return min(lst)
# Find the smallest number in a list

Code: def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
# Implement Bubble Sort algorithm

Code: def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
# Implement Quick Sort algorithm

Code: def binary_search_recursive(arr, target, left=0, right=None):
    if right is None: right = len(arr) - 1
    if left > right: return -1
    mid = (left + right) // 2
    if arr[mid] == target: return mid
    elif arr[mid] < target: return binary_search_recursive(arr, target, mid + 1, right)
    else: return binary_search_recursive(arr, target, left, mid - 1)
# Implement Binary Search using recursion

Code: def prime_numbers_upto(n): 
    primes = []
    for num in range(2, n + 1):
        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):
            primes.append(num)
    return primes
# Generate a list of prime numbers up to n

Code: def factorial_dynamic(n, memo={}):
    if n in memo: return memo[n]
    if n <= 1: return 1
    memo[n] = n * factorial_dynamic(n - 1, memo)
    return memo[n]
# Compute factorial using dynamic programming (memoization)

Code: def fibonacci_dynamic(n, memo={0: 0, 1: 1}): 
    if n in memo: return memo[n]
    memo[n] = fibonacci_dynamic(n - 1, memo) + fibonacci_dynamic(n - 2, memo)
    return memo[n]
# Compute Fibonacci numbers using dynamic programming (memoization)

Code: def sum_of_divisors(n): return sum(i for i in range(1, n) if n % i == 0)
# Find the sum of divisors of a number

Code: def generate_pythagorean_triples(limit): 
    triples = []
    for a in range(1, limit):
        for b in range(a, limit):
            c = (a ** 2 + b ** 2) ** 0.5
            if c.is_integer():
                triples.append((a, b, int(c)))
    return triples
# Generate Pythagorean triples up to a given limit

Code: def is_sudoku_valid(grid):
    def is_valid_block(block): return len(set(block)) == len(block) if 0 not in block else True
    for row in grid:
        if not is_valid_block(row): return False
    for col in zip(*grid):
        if not is_valid_block(col): return False
    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            block = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]
            if not is_valid_block(block): return False
    return True
# Check if a given Sudoku grid is valid

Code: def is_magic_square(matrix):
    n = len(matrix)
    magic_sum = sum(matrix[0])
    for row in matrix:
        if sum(row) != magic_sum: return False
    for col in zip(*matrix):
        if sum(col) != magic_sum: return False
    if sum(matrix[i][i] for i in range(n)) != magic_sum: return False
    if sum(matrix[i][n-i-1] for i in range(n)) != magic_sum: return False
    return True
# Check if a matrix is a magic square

Code: def sum_even_numbers(lst): return sum(x for x in lst if x % 2 == 0)
# Find the sum of all even numbers in a list

Code: def sum_odd_numbers(lst): return sum(x for x in lst if x % 2 != 0)
# Find the sum of all odd numbers in a list

Code: def is_even_length(s): return len(s) % 2 == 0
# Check if the length of a string is even

Code: def is_odd_length(s): return len(s) % 2 != 0
# Check if the length of a string is odd

Code: def reverse_number(n): return int(str(n)[::-1])
# Reverse the digits of a number

Code: def reverse_tuple(tpl): return tpl[::-1]
# Reverse the elements of a tuple

Code: def reverse_dict(dct): return {v: k for k, v in dct.items()}
# Reverse keys and values in a dictionary

Code: def reverse_set(st): return set(reversed(list(st)))
# Reverse a set

Code: def capitalize_alternate(s): return ''.join(c.upper() if i % 2 == 0 else c.lower() for i, c in enumerate(s))
# Capitalize alternate characters in a string

Code: def filter_multiples(lst, n): return [x for x in lst if x % n == 0]
# Filter numbers that are multiples of n in a list

Code: def contains_number(s): return any(c.isdigit() for c in s)
# Check if a string contains any numbers

Code: def contains_letter(s): return any(c.isalpha() for c in s)
# Check if a string contains any letters

Code: def is_valid_email(email): return "@" in email and "." in email.split("@")[-1]
# Check if a string is a valid email

Code: def remove_special_characters(s): import re; return re.sub(r'[^A-Za-z0-9 ]+', '', s)
# Remove special characters from a string

Code: def count_words_dict(sentence): 
    from collections import Counter
    return dict(Counter(sentence.split()))
# Count the occurrences of each word in a sentence and return a dictionary

Code: def count_sentences(text): return text.count('.') + text.count('?') + text.count('!')
# Count the number of sentences in a text

Code: def count_paragraphs(text): return text.count('\n\n') + 1
# Count the number of paragraphs in a text

Code: def square_root_approx(n): return round(n ** 0.5, 5)
# Find the square root of a number with 5 decimal precision

Code: def is_integer(s): return s.isdigit() or (s[0] == '-' and s[1:].isdigit())
# Check if a string represents an integer

Code: def is_float(s): 
    try: float(s); return True
    except ValueError: return False
# Check if a string represents a float

Code: def is_alphanumeric(s): return s.isalnum()
# Check if a string is alphanumeric

Code: def count_unique_words(sentence): return len(set(sentence.split()))
# Count the number of unique words in a sentence

Code: def most_frequent_word(sentence): 
    from collections import Counter
    return Counter(sentence.split()).most_common(1)[0][0]
# Find the most frequently occurring word in a sentence

Code: def find_smallest_word(sentence): return min(sentence.split(), key=len)
# Find the smallest word in a sentence

Code: def remove_duplicates_string(s): return ''.join(dict.fromkeys(s))
# Remove duplicate characters from a string while maintaining order

Code: def split_list(lst, size): return [lst[i:i+size] for i in range(0, len(lst), size)]
# Split a list into chunks of given size

Code: def split_sentence(sentence): return sentence.split()
# Split a sentence into words

Code: def add_matrices(matrix1, matrix2): 
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]
# Add two matrices of the same size

Code: def transpose_matrix(matrix): 
    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]
# Transpose a matrix

Code: def count_positive_numbers(lst): return sum(1 for x in lst if x > 0)
# Count the number of positive numbers in a list

Code: def count_negative_numbers(lst): return sum(1 for x in lst if x < 0)
# Count the number of negative numbers in a list

Code: def merge_dicts(dict1, dict2): return {**dict1, **dict2}
# Merge two dictionaries

Code: def filter_keys(dct, keys): return {k: v for k, v in dct.items() if k in keys}
# Filter a dictionary to keep only specified keys

Code: def filter_values(dct, values): return {k: v for k, v in dct.items() if v in values}
# Filter a dictionary to keep only specified values

Code: def replace_multiple_spaces(text): import re; return re.sub(r'\s+', ' ', text)
# Replace multiple spaces with a single space in a string

Code: def count_numbers_in_list(lst): return sum(1 for x in lst if isinstance(x, (int, float)))
# Count how many numbers are in a list

Code: def count_strings_in_list(lst): return sum(1 for x in lst if isinstance(x, str))
# Count how many strings are in a list

Code: def max_string_length(lst): return max(lst, key=len) if lst else None
# Find the longest string in a list

Code: def min_string_length(lst): return min(lst, key=len) if lst else None
# Find the shortest string in a list

Code: def remove_duplicates_nested(lst): return list(set(tuple(sublist) for sublist in lst))
# Remove duplicate lists inside a nested list

Code: def is_mirror_string(s): return s == s[::-1]
# Check if a string is a mirror string

Code: def sort_dict_by_key(dct): return dict(sorted(dct.items()))
# Sort a dictionary by keys

Code: def sort_dict_by_value(dct): return dict(sorted(dct.items(), key=lambda item: item[1]))
# Sort a dictionary by values

Code: def fibonacci_generator(n): 
    a, b = 0, 1
    for _ in range(n): yield a; a, b = b, a + b
# Generate Fibonacci numbers using a generator

Code: def sort_strings_by_length(lst): return sorted(lst, key=len)
# Sort a list of strings by their length

Code: def convert_list_to_dict(lst): return {i: lst[i] for i in range(len(lst))}
# Convert a list into a dictionary with index as keys

Code: def merge_three_lists(lst1, lst2, lst3): return list(zip(lst1, lst2, lst3))
# Merge three lists into tuples

Code: def find_substring(text, sub): return text.find(sub)
# Find the position of a substring in a string

Code: def largest_even(lst): return max(x for x in lst if x % 2 == 0) if any(x % 2 == 0 for x in lst) else None
# Find the largest even number in a list

Code: def largest_odd(lst): return max(x for x in lst if x % 2 != 0) if any(x % 2 != 0 for x in lst) else None
# Find the largest odd number in a list

Code: def smallest_even(lst): return min(x for x in lst if x % 2 == 0) if any(x % 2 == 0 for x in lst) else None
# Find the smallest even number in a list

Code: def smallest_odd(lst): return min(x for x in lst if x % 2 != 0) if any(x % 2 != 0 for x in lst) else None
# Find the smallest odd number in a list

Code: def cube_root(n): return n ** (1/3)
# Find the cube root of a number

Code: def nth_root(x, n): return x ** (1/n)
# Find the nth root of a number

Code: def factorial_recursive(n): return 1 if n == 0 else n * factorial_recursive(n - 1)
# Find the factorial of a number using recursion

Code: def is_perfect_number(n): return sum(i for i in range(1, n) if n % i == 0) == n
# Check if a number is a perfect number

Code: def is_happy_number(n): 
    seen = set()
    while n != 1 and n not in seen:
        seen.add(n)
        n = sum(int(digit) ** 2 for digit in str(n))
    return n == 1
# Check if a number is a happy number

Code: def decimal_to_octal(n): return oct(n)[2:]
# Convert a decimal number to octal

Code: def octal_to_decimal(n): return int(n, 8)
# Convert an octal number to decimal

Code: def is_abundant_number(n): return sum(i for i in range(1, n) if n % i == 0) > n
# Check if a number is an abundant number

Code: def generate_fibonacci(n): return [0, 1] + [sum([0, 1][-2:]) for _ in range(n-2)]
# Generate the first n Fibonacci numbers

Code: def count_digits(n): return len(str(n))
# Count the number of digits in a number

Code: def reverse_words_order(sentence): return " ".join(sentence.split()[::-1])
# Reverse the order of words in a sentence

Code: def check_pangram(text): return set("abcdefghijklmnopqrstuvwxyz").issubset(set(text.lower()))
# Check if a string is a pangram

Code: def swap_first_last(lst): lst[0], lst[-1] = lst[-1], lst[0]; return lst
# Swap the first and last elements in a list

Code: def remove_punctuation(text): import string; return text.translate(str.maketrans('', '', string.punctuation))
# Remove punctuation from a string

Code: def find_greatest(lst): return max(lst)
# Find the greatest number in a list

Code: def find_smallest(lst): return min(lst)
# Find the smallest number in a list

Code: def sum_digits_recursive(n): return n if n < 10 else sum_digits_recursive(sum(int(digit) for digit in str(n)))
# Sum the digits of a number recursively

Code: def hex_to_decimal(hex_str): return int(hex_str, 16)
# Convert a hexadecimal number to decimal

Code: def rotate_list(lst, k): return lst[-k:] + lst[:-k]
# Rotate a list by k positions

Code: def second_smallest(lst): return sorted(set(lst))[1] if len(set(lst)) > 1 else None
# Find the second smallest number in a list

Code: def count_capital_letters(s): return sum(1 for c in s if c.isupper())
# Count capital letters in a string

Code: def count_lowercase_letters(s): return sum(1 for c in s if c.islower())
# Count lowercase letters in a string

Code: def is_armstrong_recursive(n): return n == sum(int(digit) ** len(str(n)) for digit in str(n))
# Check if a number is an Armstrong number using recursion

Code: def generate_pascal_triangle(n): 
    triangle = [[1]]
    for i in range(1, n): triangle.append([1] + [triangle[i-1][j] + triangle[i-1][j+1] for j in range(len(triangle[i-1])-1)] + [1])
    return triangle
# Generate Pascal's triangle up to n rows

Code: def convert_seconds_to_hms(seconds): 
    h, rem = divmod(seconds, 3600)
    m, s = divmod(rem, 60)
    return h, m, s
# Convert seconds into hours, minutes, and seconds

Code: def roman_to_integer(roman): 
    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    total = 0
    for i in range(len(roman) - 1): total += -roman_map[roman[i]] if roman_map[roman[i]] < roman_map[roman[i + 1]] else roman_map[roman[i]]
    return total + roman_map[roman[-1]]
# Convert a Roman numeral to an integer

Code: def integer_to_roman(num): 
    roman_map = {1000: "M", 900: "CM", 500: "D", 400: "CD", 100: "C", 90: "XC", 50: "L", 40: "XL", 10: "X", 9: "IX", 5: "V", 4: "IV", 1: "I"}
    result = ""
    for value, symbol in roman_map.items():
        while num >= value: result += symbol; num -= value
    return result
# Convert an integer to a Roman numeral

Code: def string_palindrome_recursive(s): return True if len(s) < 2 else s[0] == s[-1] and string_palindrome_recursive(s[1:-1])
# Check if a string is a palindrome using recursion

Code: def binary_search(lst, target): 
    left, right = 0, len(lst) - 1
    while left <= right:
        mid = (left + right) // 2
        if lst[mid] == target: return mid
        elif lst[mid] < target: left = mid + 1
        else: right = mid - 1
    return -1
# Perform binary search on a sorted list

Code: def count_substring_occurrences(text, substring): return text.count(substring)
# Count occurrences of a substring in a string

Code: def print_multiplication_table(n): return [n * i for i in range(1, 11)]
# Print the multiplication table of a number

Code: def remove_empty_strings(lst): return [s for s in lst if s]
# Remove empty strings from a list

Code: def calculate_circle_circumference(radius): import math; return 2 * math.pi * radius
# Calculate the circumference of a circle

Code: def caesar_cipher(text, shift): 
    result = ""
    for char in text:
        if char.isalpha():
            shift_amount = shift % 26
            new_char = chr(ord(char) + shift_amount) if char.islower() else chr(ord(char) + shift_amount)
            if (char.islower() and new_char > 'z') or (char.isupper() and new_char > 'Z'):
                new_char = chr(ord(new_char) - 26)
            result += new_char
        else:
            result += char
    return result
# Encrypt a text using Caesar cipher

Code: def calculate_average(lst): return sum(lst) / len(lst) if lst else 0
# Calculate the average of a list

Code: def factorial_loop(n): 
    result = 1
    for i in range(1, n + 1): result *= i
    return result
# Find the factorial of a number using a loop

Code: def square_root_newton(n, precision=0.00001): 
    guess = n
    while abs(guess * guess - n) > precision:
        guess = (guess + n / guess) / 2
    return guess
# Find the square root of a number using Newton's method

Code: def is_hexadecimal(s): return all(c in "0123456789ABCDEFabcdef" for c in s)
# Check if a string is a valid hexadecimal number

Code: def gcd_euclidean(a, b): return a if b == 0 else gcd_euclidean(b, a % b)
# Find the greatest common divisor using the Euclidean algorithm

Code: def find_duplicate_numbers(lst): return list(set([x for x in lst if lst.count(x) > 1]))
# Find duplicate numbers in a list

Code: def remove_duplicates_order(lst): return list(dict.fromkeys(lst))
# Remove duplicates from a list while maintaining order

Code: def power(base, exp): return base ** exp
# Calculate the power of a number

Code: def cube(n): return n ** 3
# Find the cube of a number

Code: def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
# Check if a given year is a leap year

Code: def count_words(sentence): return len(sentence.split())
# Count the number of words in a sentence

Code: def first_unique_char(s): return next((char for char in s if s.count(char) == 1), None)
# Find the first non-repeating character in a string

Code: def reverse_list(lst): return lst[::-1]
# Reverse a list

Code: def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist]
# Flatten a nested list

Code: def is_subset(set1, set2): return set1.issubset(set2)
# Check if one set is a subset of another

Code: def intersection(lst1, lst2): return list(set(lst1) & set(lst2))
# Find common elements between two lists

Code: def difference(lst1, lst2): return list(set(lst1) - set(lst2))
# Find elements in lst1 but not in lst2

Code: def union(lst1, lst2): return list(set(lst1) | set(lst2))
# Find the union of two lists

Code: def remove_spaces(text): return text.replace(" ", "")
# Remove spaces from a string

Code: def most_frequent(lst): return max(set(lst), key=lst.count)
# Find the most frequent element in a list

Code: def swap_case(text): return text.swapcase()
# Swap the case of each character in a string

Code: def square_list(lst): return [x ** 2 for x in lst]
# Return a list of squares of numbers

Code: def filter_even(lst): return [x for x in lst if x % 2 == 0]
# Filter even numbers from a list

Code: def filter_odd(lst): return [x for x in lst if x % 2 != 0]
# Filter odd numbers from a list

Code: def is_divisible(x, y): return x % y == 0
# Check if a number is divisible by another number

Code: def factorial_iterative(n): 
    result = 1
    for i in range(2, n + 1): result *= i
    return result
# Find the factorial of a number using iteration

Code: def gcd_list(lst): 
    import math
    from functools import reduce
    return reduce(math.gcd, lst)
# Find the greatest common divisor (GCD) of a list of numbers

Code: def lcm_list(lst): 
    import math
    from functools import reduce
    return reduce(lambda x, y: (x * y) // math.gcd(x, y), lst)
# Find the least common multiple (LCM) of a list of numbers

Code: def sum_list(lst): return sum(lst)
# Return the sum of all elements in a list

Code: def product_list(lst): 
    result = 1
    for num in lst: result *= num
    return result
# Find the product of all elements in a list

Code: def sum_of_squares(n): return sum(x ** 2 for x in range(1, n + 1))
# Find the sum of squares of the first n natural numbers

Code: def sum_of_cubes(n): return sum(x ** 3 for x in range(1, n + 1))
# Find the sum of cubes of the first n natural numbers

Code: def find_mode(lst): 
    from collections import Counter
    return Counter(lst).most_common(1)[0][0]
# Find the mode (most frequent element) in a list

Code: def median(lst): 
    sorted_lst = sorted(lst)
    mid = len(sorted_lst) // 2
    return (sorted_lst[mid] if len(lst) % 2 != 0 else (sorted_lst[mid - 1] + sorted_lst[mid]) / 2)
# Find the median of a list

Code: def fahrenheit_to_celsius(f): return (f - 32) * 5/9
# Convert Fahrenheit to Celsius

Code: def celsius_to_fahrenheit(c): return (c * 9/5) + 32
# Convert Celsius to Fahrenheit

Code: def count_vowels(s): return sum(1 for char in s if char.lower() in "aeiou")
# Count the number of vowels in a string

Code: def count_consonants(s): return sum(1 for char in s if char.lower() in "bcdfghjklmnpqrstvwxyz")
# Count the number of consonants in a string

Code: def ascii_sum(s): return sum(ord(char) for char in s)
# Return the sum of ASCII values of characters in a string

Code: def common_chars(s1, s2): return list(set(s1) & set(s2))
# Find common characters in two strings

Code: def unique_chars(s): return list(set(s))
# Get unique characters from a string

Code: def digit_sum(n): return sum(int(digit) for digit in str(n))
# Find the sum of digits in a number

Code: def is_perfect_square(n): return (n ** 0.5).is_integer()
# Check if a number is a perfect square

Code: def is_armstrong(n): return n == sum(int(digit) ** len(str(n)) for digit in str(n))
# Check if a number is an Armstrong number

Code: def binary_to_hex(binary): return hex(int(binary, 2))[2:]
# Convert a binary number to hexadecimal

Code: def hex_to_binary(hex_str): return bin(int(hex_str, 16))[2:]
# Convert a hexadecimal number to binary

Code: def reverse_digits(n): return int(str(n)[::-1])
# Reverse the digits of a number

Code: def prime_factors(n): 
    factors, i = [], 2
    while i * i <= n:
        if n % i: i += 1
        else: n //= i; factors.append(i)
    if n > 1: factors.append(n)
    return factors
# Find the prime factors of a number

Code: def count_occurrences_dict(lst): 
    from collections import Counter
    return dict(Counter(lst))
# Count occurrences of each element in a list and return a dictionary

Code: def find_largest_word(sentence): return max(sentence.split(), key=len)
# Find the longest word in a sentence

Code: def split_even_odd(lst): 
    evens = [x for x in lst if x % 2 == 0]
    odds = [x for x in lst if x % 2 != 0]
    return evens, odds
# Split a list into even and odd numbers

Code: def is_symmetric(lst): return lst == lst[::-1]
# Check if a list is symmetric (same forward and backward)

Code: def triangle_area(base, height): return 0.5 * base * height
# Calculate the area of a triangle

Code: def rectangle_area(length, width): return length * width
# Calculate the area of a rectangle

Code: def circle_area(radius): import math; return math.pi * radius ** 2
# Calculate the area of a circle

Code: def print_message(): return "Hello, World!"
# Print a message

Code: def greet_user(name): return f"Hello, {name}"
# Take a name as input and return a greeting

Code: def add(a, b): return a + b
# Add two numbers

Code: def subtract(a, b): return a - b
# Subtract two numbers

Code: def multiply(a, b): return a * b
# Multiply two numbers

Code: def divide(a, b): return a / b if b != 0 else "Cannot divide by zero"
# Divide two numbers

Code: def is_even(num): return num % 2 == 0
# Check if a number is even

Code: def loop_numbers(n): return [i for i in range(n)]
# Return a list of numbers from 0 to n-1

Code: def while_loop_example(n): return [f"Count is: {i}" for i in range(n)]
# Return a list of count messages up to n

Code: def greet(): return "Hello from function!"
# Print a greeting message from a function

Code: def add_numbers(x, y): return x + y
# Return the sum of two numbers

Code: def first_element(lst): return lst[0] if lst else None
# Return the first element of a list

Code: def last_element(lst): return lst[-1] if lst else None
# Return the last element of a list

Code: def append_element(lst, element): lst.append(element); return lst
# Append an element to a list

Code: def get_dict_value(dct, key): return dct.get(key, "Key not found")
# Retrieve a value from a dictionary

Code: def tuple_element(tpl, index): return tpl[index] if 0 <= index < len(tpl) else None
# Get an element from a tuple by index

Code: def add_set_element(st, element): st.add(element); return st
# Add an element to a set

Code: def check_number(x): return "Greater than 10" if x > 10 else "Equal to 10" if x == 10 else "Less than 10"
# Check if a number is greater, less than, or equal to 10

Code: def slice_string(text, start, end): return text[start:end]
# Slice a string from start to end index

Code: def nested_loop(n, m): return [(i, j) for i in range(n) for j in range(m)]
# Generate pairs using nested loops

Code: def break_loop(n): return [i for i in range(n) if i != 3]
# Return a list skipping number 3

Code: def continue_loop(n): return [i for i in range(n) if i != 3]
# Return a list skipping number 3 using continue

Code: def safe_division(value): 
    try: return 10 / value
    except ZeroDivisionError: return "Cannot divide by zero!"
    except ValueError: return "Invalid input! Enter a number."
# Perform safe division with error handling

Code: def read_file(filename): 
    with open(filename, "r") as file: return file.read()
# Read and return the content of a file

Code: def write_file(filename, content): 
    with open(filename, "w") as file: file.write(content)
# Write content to a file

Code: class Person:
    def __init__(self, name, age): self.name, self.age = name, age
    def get_info(self): return f"{self.name}, {self.age}"
# Define a Person class with attributes

Code: def lambda_square(x): return x ** 2
# Return the square of a number using a lambda function

Code: def list_comprehension(n): return [x * 2 for x in range(n)]
# Generate a list using list comprehension

Code: def reverse_string(word): return word[::-1]
# Return the reversed string

Code: import random; def random_number(): return random.randint(1, 100)
# Generate a random number between 1 and 100

Code: def string_length(text): return len(text)
# Return the length of a string

Code: def string_upper(text): return text.upper()
# Convert a string to uppercase

Code: def string_lower(text): return text.lower()
# Convert a string to lowercase

Code: def starts_with(text, letter): return text.startswith(letter)
# Check if a string starts with a given letter

Code: def ends_with(text, letter): return text.endswith(letter)
# Check if a string ends with a given letter

Code: def replace_string(text, old, new): return text.replace(old, new)
# Replace part of a string

Code: def split_string(text): return text.split()
# Split a string into a list

Code: def join_list(lst): return " ".join(lst)
# Join a list into a string

Code: def sorted_list(nums): return sorted(nums)
# Return a sorted list

Code: def max_min(nums): return max(nums), min(nums)
# Return the maximum and minimum values in a list

Code: def count_occurrences(lst, value): return lst.count(value)
# Count occurrences of an element in a list

Code: def find_index(lst, value): return lst.index(value) if value in lst else -1
# Find the index of an element in a list

Code: def merge_lists(lst1, lst2): return lst1 + lst2
# Merge two lists

Code: def map_double(lst): return list(map(lambda x: x*2, lst))
# Double elements of a list using map function

Code: def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))
# Check if a number is prime

Code: def factorial(n): return 1 if n == 0 else n * factorial(n - 1)
# Return the factorial of a number

Code: import math; def find_gcd(a, b): return math.gcd(a, b)
# Return the greatest common divisor (GCD)

Code: def is_anagram(s1, s2): return sorted(s1) == sorted(s2)
# Check if two words are anagrams

Code: def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)
# Merge and sort two lists

Code: def remove_duplicates(lst): return list(set(lst))
# Remove duplicates from a list

Code: from collections import Counter; def count_characters(text): return Counter(text)
# Count occurrences of each character in a string

Code: def swap_values(a, b): return b, a
# Swap two variables

Code: def fibonacci(n): 
    sequence = [0, 1]
    for _ in range(n-2): sequence.append(sequence[-1] + sequence[-2])
    return sequence
# Generate a Fibonacci sequence up to n terms

Code: def second_largest(lst): return sorted(set(lst))[-2] if len(set(lst)) > 1 else None
# Find the second largest number in a list

Code: def is_palindrome(s): return s == s[::-1]
# Check if a string is a palindrome

Code: def ascii_value(char): return ord(char)
# Return the ASCII value of a character

Code: def sum_of_digits(n): return sum(int(digit) for digit in str(n))
# Return the sum of digits of a number

Code: def remove_vowels(s): return "".join(c for c in s if c.lower() not in "aeiou")
# Remove vowels from a string

Code: def list_to_dict(keys, values): return dict(zip(keys, values))
# Convert two lists into a dictionary

Code: def decimal_to_binary(n): return bin(n)[2:]
# Convert a decimal number to binary

Code: def binary_to_decimal(b): return int(b, 2)
# Convert a binary number to decimal

Code: def hcf(a, b): return math.gcd(a, b)
# Find the highest common factor (HCF) of two numbers

Code: def lcm(a, b): return abs(a * b) // math.gcd(a, b)
# Find the least common multiple (LCM) of two numbers

Code: def capitalize_words(text): return text.title()
# Capitalize the first letter of each word in a sentence

Code: def reverse_words(sentence): return " ".join(sentence.split()[::-1])
# Reverse the order of words in a sentence

Code: def is_perfect_square(n): return (n ** 0.5).is_integer()
# Check if a number is a perfect square

Code: def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))
# Check if a number is prime

Code: def nth_fibonacci(n, memo={0: 0, 1: 1}):
    if n in memo: return memo[n]
    memo[n] = nth_fibonacci(n - 1, memo) + nth_fibonacci(n - 2, memo)
    return memo[n]
# Find the nth Fibonacci number using memoization

Code: def generate_fibonacci_series(n): 
    fib = [0, 1]
    for _ in range(n - 2): fib.append(fib[-1] + fib[-2])
    return fib
# Generate a Fibonacci sequence of n terms

Code: def gcd(a, b): return a if b == 0 else gcd(b, a % b)
# Find the Greatest Common Divisor (GCD) using recursion

Code: def lcm(a, b): return abs(a * b) // gcd(a, b)
# Find the Least Common Multiple (LCM) of two numbers

Code: def prime_factors(n): 
    factors, i = [], 2
    while i * i <= n:
        if n % i: i += 1
        else: n //= i; factors.append(i)
    if n > 1: factors.append(n)
    return factors
# Find prime factors of a number

Code: def count_digits(n): return len(str(abs(n)))
# Count the number of digits in a number

Code: def reverse_number(n): return int(str(n)[::-1])
# Reverse the digits of a number

Code: def factorial(n): return 1 if n == 0 else n * factorial(n - 1)
# Compute factorial of a number

Code: def power(base, exp): return base ** exp
# Compute the power of a number

Code: def is_palindrome(s): return s == s[::-1]
# Check if a string is a palindrome

Code: def is_anagram(s1, s2): return sorted(s1) == sorted(s2)
# Check if two strings are anagrams

Code: def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')
# Remove vowels from a string

Code: def count_vowels(s): return sum(1 for c in s if c.lower() in 'aeiou')
# Count vowels in a string

Code: def count_consonants(s): return sum(1 for c in s if c.isalpha() and c.lower() not in 'aeiou')
# Count consonants in a string

Code: def reverse_string(s): return s[::-1]
# Reverse a string

Code: def capitalize_words(sentence): return sentence.title()
# Capitalize the first letter of each word in a sentence

Code: def longest_word(sentence): return max(sentence.split(), key=len)
# Find the longest word in a sentence

Code: def shortest_word(sentence): return min(sentence.split(), key=len)
# Find the shortest word in a sentence

Code: def word_count(sentence): return len(sentence.split())
# Count the number of words in a sentence

Code: def unique_words(sentence): return set(sentence.split())
# Find unique words in a sentence

Code: def remove_duplicates(lst): return list(set(lst))
# Remove duplicate elements from a list

Code: def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist]
# Flatten a nested list

Code: def merge_dicts(d1, d2): return {**d1, **d2}
# Merge two dictionaries

Code: def sort_list(lst): return sorted(lst)
# Sort a list in ascending order

Code: def binary_search(lst, target):
    left, right = 0, len(lst) - 1
    while left <= right:
        mid = (left + right) // 2
        if lst[mid] == target: return mid
        elif lst[mid] < target: left = mid + 1
        else: right = mid - 1
    return -1
# Perform binary search on a sorted list

Code: def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
    return arr
# Implement Bubble Sort

Code: def quicksort(arr):
    if len(arr) <= 1: return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)
# Implement Quick Sort

Code: def read_file(filename):
    with open(filename, 'r') as file:
        return file.read()
# Read content from a file

Code: def write_to_file(filename, content):
    with open(filename, 'w') as file:
        file.write(content)
# Write content to a file

Code: def append_to_file(filename, content):
    with open(filename, 'a') as file:
        file.write(content + '\n')
# Append content to a file

Code: def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
# Check if a year is a leap year

Code: def celsius_to_fahrenheit(c): return (c * 9/5) + 32
# Convert Celsius to Fahrenheit

Code: def fahrenheit_to_celsius(f): return (f - 32) * 5/9
# Convert Fahrenheit to Celsius

Code: def area_of_circle(radius): import math; return math.pi * radius ** 2
# Compute the area of a circle

Code: def area_of_rectangle(length, width): return length * width
# Compute the area of a rectangle

Code: def area_of_triangle(base, height): return 0.5 * base * height
# Compute the area of a triangle

Code: def perimeter_of_rectangle(length, width): return 2 * (length + width)
# Compute the perimeter of a rectangle

Code: def perimeter_of_circle(radius): import math; return 2 * math.pi * radius
# Compute the perimeter of a circle

Code: def volume_of_sphere(radius): import math; return (4/3) * math.pi * radius ** 3
# Compute the volume of a sphere

Code: def volume_of_cube(side): return side ** 3
# Compute the volume of a cube

Code: def volume_of_cylinder(radius, height): import math; return math.pi * radius ** 2 * height
# Compute the volume of a cylinder

Code: def triangle_type(a, b, c):
    if a == b == c: return "Equilateral"
    elif a == b or b == c or a == c: return "Isosceles"
    else: return "Scalene"
# Determine the type of triangle

Code: def count_occurrences(lst, value): return lst.count(value)
# Count occurrences of an element in a list

Code: def even_numbers(lst): return [x for x in lst if x % 2 == 0]
# Filter even numbers from a list

Code: def odd_numbers(lst): return [x for x in lst if x % 2 != 0]
# Filter odd numbers from a list

Code: def intersection(lst1, lst2): return list(set(lst1) & set(lst2))
# Find common elements between two lists

Code: def difference(lst1, lst2): return list(set(lst1) - set(lst2))
# Find elements in lst1 but not in lst2

Code: def union(lst1, lst2): return list(set(lst1) | set(lst2))
# Find the union of two lists

Code: def swap_values(a, b): return b, a
# Swap two values

Code: def largest_in_list(lst): return max(lst)
# Find the largest number in a list

Code: def smallest_in_list(lst): return min(lst)
# Find the smallest number in a list

Code: def power(base, exp): return base ** exp
# Calculate the power of a number

Code: def cube(n): return n ** 3
# Find the cube of a number

Code: def is_leap_year(year): return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
# Check if a given year is a leap year

Code: def count_words(sentence): return len(sentence.split())
# Count the number of words in a sentence

Code: def first_unique_char(s): return next((char for char in s if s.count(char) == 1), None)
# Find the first non-repeating character in a string

Code: def reverse_list(lst): return lst[::-1]
# Reverse a list

Code: def flatten_list(nested_list): return [item for sublist in nested_list for item in sublist]
# Flatten a nested list

Code: def is_subset(set1, set2): return set1.issubset(set2)
# Check if one set is a subset of another

Code: def intersection(lst1, lst2): return list(set(lst1) & set(lst2))
# Find common elements between two lists

Code: def difference(lst1, lst2): return list(set(lst1) - set(lst2))
# Find elements in lst1 but not in lst2

Code: def union(lst1, lst2): return list(set(lst1) | set(lst2))
# Find the union of two lists

Code: def remove_spaces(text): return text.replace(" ", "")
# Remove spaces from a string

Code: def most_frequent(lst): return max(set(lst), key=lst.count)
# Find the most frequent element in a list

Code: def swap_case(text): return text.swapcase()
# Swap the case of each character in a string

Code: def square_list(lst): return [x ** 2 for x in lst]
# Return a list of squares of numbers

Code: def filter_even(lst): return [x for x in lst if x % 2 == 0]
# Filter even numbers from a list

Code: def filter_odd(lst): return [x for x in lst if x % 2 != 0]
# Filter odd numbers from a list

Code: def is_divisible(x, y): return x % y == 0
# Check if a number is divisible by another number

Code: def factorial_iterative(n): 
    result = 1
    for i in range(2, n + 1): result *= i
    return result
# Find the factorial of a number using iteration

Code: def gcd_list(lst): 
    import math
    from functools import reduce
    return reduce(math.gcd, lst)
# Find the greatest common divisor (GCD) of a list of numbers

Code: def lcm_list(lst): 
    import math
    from functools import reduce
    return reduce(lambda x, y: (x * y) // math.gcd(x, y), lst)
# Find the least common multiple (LCM) of a list of numbers

Code: def sum_list(lst): return sum(lst)
# Return the sum of all elements in a list

Code: def product_list(lst): 
    result = 1
    for num in lst: result *= num
    return result
# Find the product of all elements in a list

Code: def sum_of_squares(n): return sum(x ** 2 for x in range(1, n + 1))
# Find the sum of squares of the first n natural numbers

Code: def sum_of_cubes(n): return sum(x ** 3 for x in range(1, n + 1))
# Find the sum of cubes of the first n natural numbers

Code: def find_mode(lst): 
    from collections import Counter
    return Counter(lst).most_common(1)[0][0]
# Find the mode (most frequent element) in a list

Code: def median(lst): 
    sorted_lst = sorted(lst)
    mid = len(sorted_lst) // 2
    return (sorted_lst[mid] if len(lst) % 2 != 0 else (sorted_lst[mid - 1] + sorted_lst[mid]) / 2)
# Find the median of a list

Code: def fahrenheit_to_celsius(f): return (f - 32) * 5/9
# Convert Fahrenheit to Celsius

Code: def celsius_to_fahrenheit(c): return (c * 9/5) + 32
# Convert Celsius to Fahrenheit

Code: def count_vowels(s): return sum(1 for char in s if char.lower() in "aeiou")
# Count the number of vowels in a string

Code: def count_consonants(s): return sum(1 for char in s if char.lower() in "bcdfghjklmnpqrstvwxyz")
# Count the number of consonants in a string

Code: def ascii_sum(s): return sum(ord(char) for char in s)
# Return the sum of ASCII values of characters in a string

Code: def common_chars(s1, s2): return list(set(s1) & set(s2))
# Find common characters in two strings

Code: def unique_chars(s): return list(set(s))
# Get unique characters from a string

Code: def digit_sum(n): return sum(int(digit) for digit in str(n))
# Find the sum of digits in a number

Code: def is_perfect_square(n): return (n ** 0.5).is_integer()
# Check if a number is a perfect square

Code: def is_armstrong(n): return n == sum(int(digit) ** len(str(n)) for digit in str(n))
# Check if a number is an Armstrong number

Code: def binary_to_hex(binary): return hex(int(binary, 2))[2:]
# Convert a binary number to hexadecimal

Code: def hex_to_binary(hex_str): return bin(int(hex_str, 16))[2:]
# Convert a hexadecimal number to binary

Code: def reverse_digits(n): return int(str(n)[::-1])
# Reverse the digits of a number

Code: def prime_factors(n): 
    factors, i = [], 2
    while i * i <= n:
        if n % i: i += 1
        else: n //= i; factors.append(i)
    if n > 1: factors.append(n)
    return factors
# Find the prime factors of a number

Code: def count_occurrences_dict(lst): 
    from collections import Counter
    return dict(Counter(lst))
# Count occurrences of each element in a list and return a dictionary

Code: def find_largest_word(sentence): return max(sentence.split(), key=len)
# Find the longest word in a sentence

Code: def split_even_odd(lst): 
    evens = [x for x in lst if x % 2 == 0]
    odds = [x for x in lst if x % 2 != 0]
    return evens, odds
# Split a list into even and odd numbers

Code: def is_symmetric(lst): return lst == lst[::-1]
# Check if a list is symmetric (same forward and backward)

Code: def triangle_area(base, height): return 0.5 * base * height
# Calculate the area of a triangle

Code: def rectangle_area(length, width): return length * width
# Calculate the area of a rectangle

Code: def circle_area(radius): import math; return math.pi * radius ** 2
# Calculate the area of a circle

Code: def print_message(): return "Hello, World!"
# Print a message

Code: def greet_user(name): return f"Hello, {name}"
# Take a name as input and return a greeting

Code: def add(a, b): return a + b
# Add two numbers

Code: def subtract(a, b): return a - b
# Subtract two numbers

Code: def multiply(a, b): return a * b
# Multiply two numbers

Code: def divide(a, b): return a / b if b != 0 else "Cannot divide by zero"
# Divide two numbers

Code: def is_even(num): return num % 2 == 0
# Check if a number is even

Code: def loop_numbers(n): return [i for i in range(n)]
# Return a list of numbers from 0 to n-1

Code: def while_loop_example(n): return [f"Count is: {i}" for i in range(n)]
# Return a list of count messages up to n

Code: def greet(): return "Hello from function!"
# Print a greeting message from a function

Code: def add_numbers(x, y): return x + y
# Return the sum of two numbers

Code: def first_element(lst): return lst[0] if lst else None
# Return the first element of a list

Code: def last_element(lst): return lst[-1] if lst else None
# Return the last element of a list

Code: def append_element(lst, element): lst.append(element); return lst
# Append an element to a list

Code: def get_dict_value(dct, key): return dct.get(key, "Key not found")
# Retrieve a value from a dictionary

Code: def tuple_element(tpl, index): return tpl[index] if 0 <= index < len(tpl) else None
# Get an element from a tuple by index

Code: def add_set_element(st, element): st.add(element); return st
# Add an element to a set

Code: def check_number(x): return "Greater than 10" if x > 10 else "Equal to 10" if x == 10 else "Less than 10"
# Check if a number is greater, less than, or equal to 10

Code: def slice_string(text, start, end): return text[start:end]
# Slice a string from start to end index

Code: def nested_loop(n, m): return [(i, j) for i in range(n) for j in range(m)]
# Generate pairs using nested loops

Code: def break_loop(n): return [i for i in range(n) if i != 3]
# Return a list skipping number 3

Code: def continue_loop(n): return [i for i in range(n) if i != 3]
# Return a list skipping number 3 using continue

Code: def safe_division(value): 
    try: return 10 / value
    except ZeroDivisionError: return "Cannot divide by zero!"
    except ValueError: return "Invalid input! Enter a number."
# Perform safe division with error handling

Code: def read_file(filename): 
    with open(filename, "r") as file: return file.read()
# Read and return the content of a file

Code: def write_file(filename, content): 
    with open(filename, "w") as file: file.write(content)
# Write content to a file

Code: class Person:
    def __init__(self, name, age): self.name, self.age = name, age
    def get_info(self): return f"{self.name}, {self.age}"
# Define a Person class with attributes

Code: def lambda_square(x): return x ** 2
# Return the square of a number using a lambda function

Code: def list_comprehension(n): return [x * 2 for x in range(n)]
# Generate a list using list comprehension

Code: def reverse_string(word): return word[::-1]
# Return the reversed string

Code: import random; def random_number(): return random.randint(1, 100)
# Generate a random number between 1 and 100

Code: def string_length(text): return len(text)
# Return the length of a string

Code: def string_upper(text): return text.upper()
# Convert a string to uppercase

Code: def string_lower(text): return text.lower()
# Convert a string to lowercase

Code: def starts_with(text, letter): return text.startswith(letter)
# Check if a string starts with a given letter

Code: def ends_with(text, letter): return text.endswith(letter)
# Check if a string ends with a given letter

Code: def replace_string(text, old, new): return text.replace(old, new)
# Replace part of a string

Code: def split_string(text): return text.split()
# Split a string into a list

Code: def join_list(lst): return " ".join(lst)
# Join a list into a string

Code: def sorted_list(nums): return sorted(nums)
# Return a sorted list

Code: def max_min(nums): return max(nums), min(nums)
# Return the maximum and minimum values in a list

Code: def count_occurrences(lst, value): return lst.count(value)
# Count occurrences of an element in a list

Code: def find_index(lst, value): return lst.index(value) if value in lst else -1
# Find the index of an element in a list

Code: def merge_lists(lst1, lst2): return lst1 + lst2
# Merge two lists

Code: def map_double(lst): return list(map(lambda x: x*2, lst))
# Double elements of a list using map function

Code: def is_prime(n): return n > 1 and all(n % i != 0 for i in range(2, int(n ** 0.5) + 1))
# Check if a number is prime

Code: def factorial(n): return 1 if n == 0 else n * factorial(n - 1)
# Return the factorial of a number

Code: import math; def find_gcd(a, b): return math.gcd(a, b)
# Return the greatest common divisor (GCD)

Code: def is_anagram(s1, s2): return sorted(s1) == sorted(s2)
# Check if two words are anagrams

Code: def merge_sorted_lists(lst1, lst2): return sorted(lst1 + lst2)
# Merge and sort two lists

Code: def remove_duplicates(lst): return list(set(lst))
# Remove duplicates from a list

Code: from collections import Counter; def count_characters(text): return Counter(text)
# Count occurrences of each character in a string

Code: def swap_values(a, b): return b, a
# Swap two variables

Code: def fibonacci(n): 
    sequence = [0, 1]
    for _ in range(n-2): sequence.append(sequence[-1] + sequence[-2])
    return sequence
# Generate a Fibonacci sequence up to n terms

Code: def second_largest(lst): return sorted(set(lst))[-2] if len(set(lst)) > 1 else None
# Find the second largest number in a list

Code: def is_palindrome(s): return s == s[::-1]
# Check if a string is a palindrome

Code: def ascii_value(char): return ord(char)
# Return the ASCII value of a character

Code: def sum_of_digits(n): return sum(int(digit) for digit in str(n))
# Return the sum of digits of a number

Code: def remove_vowels(s): return "".join(c for c in s if c.lower() not in "aeiou")
# Remove vowels from a string

Code: def list_to_dict(keys, values): return dict(zip(keys, values))
# Convert two lists into a dictionary

Code: def decimal_to_binary(n): return bin(n)[2:]
# Convert a decimal number to binary

Code: def binary_to_decimal(b): return int(b, 2)
# Convert a binary number to decimal

Code: def hcf(a, b): return math.gcd(a, b)
# Find the highest common factor (HCF) of two numbers

Code: def lcm(a, b): return abs(a * b) // math.gcd(a, b)
# Find the least common multiple (LCM) of two numbers

Code: def capitalize_words(text): return text.title()
# Capitalize the first letter of each word in a sentence

Code: def reverse_words(sentence): return " ".join(sentence.split()[::-1])
# Reverse the order of words in a sentence

Code: def upload_to_s3(bucket_name, file_name, aws_access_key, aws_secret_key):
    import boto3
    s3 = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    s3.upload_file(file_name, bucket_name, file_name)
    return f"File {file_name} uploaded to S3 bucket {bucket_name}"
# Upload a file to AWS S3

Code: def list_s3_buckets(aws_access_key, aws_secret_key):
    import boto3
    s3 = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    return [bucket['Name'] for bucket in s3.list_buckets()['Buckets']]
# List all S3 buckets in an AWS account

Code: def get_instance_status(instance_id, aws_access_key, aws_secret_key, region):
    import boto3
    ec2 = boto3.client('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    response = ec2.describe_instances(InstanceIds=[instance_id])
    return response['Reservations'][0]['Instances'][0]['State']['Name']
# Check the status of an AWS EC2 instance

Code: def start_ec2_instance(instance_id, aws_access_key, aws_secret_key, region):
    import boto3
    ec2 = boto3.client('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    ec2.start_instances(InstanceIds=[instance_id])
    return f"Instance {instance_id} started"
# Start an AWS EC2 instance

Code: def stop_ec2_instance(instance_id, aws_access_key, aws_secret_key, region):
    import boto3
    ec2 = boto3.client('ec2', region_name=region, aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    ec2.stop_instances(InstanceIds=[instance_id])
    return f"Instance {instance_id} stopped"
# Stop an AWS EC2 instance

Code: def create_gcp_vm(instance_name, zone, project, machine_type, image_family):
    from google.cloud import compute_v1
    instance_client = compute_v1.InstancesClient()
    instance = compute_v1.Instance(
        name=instance_name,
        machine_type=f"zones/{zone}/machineTypes/{machine_type}",
        disks=[{
            "boot": True,
            "initializeParams": {
                "sourceImage": f"projects/debian-cloud/global/images/family/{image_family}"
            }
        }],
        network_interfaces=[{
            "network": "global/networks/default"
        }]
    )
    operation = instance_client.insert(project=project, zone=zone, instance_resource=instance)
    return f"VM {instance_name} creation started in {zone}"
# Create a new virtual machine in Google Cloud

Code: def get_gcp_vm_status(instance_name, zone, project):
    from google.cloud import compute_v1
    instance_client = compute_v1.InstancesClient()
    instance = instance_client.get(project=project, zone=zone, instance=instance_name)
    return instance.status
# Get the status of a Google Cloud VM

Code: def fetch_azure_vm_status(subscription_id, resource_group, vm_name, client_id, client_secret, tenant_id):
    from azure.identity import ClientSecretCredential
    from azure.mgmt.compute import ComputeManagementClient
    credentials = ClientSecretCredential(tenant_id, client_id, client_secret)
    compute_client = ComputeManagementClient(credentials, subscription_id)
    vm = compute_client.virtual_machines.get(resource_group, vm_name, expand='instanceView')
    return vm.instance_view.statuses[1].display_status
# Get the status of an Azure Virtual Machine

Code: def get_system_info():
    import platform
    return {
        "OS": platform.system(),
        "Version": platform.version(),
        "Architecture": platform.architecture(),
    }
# Get basic system information

Code: def list_processes():
    import psutil
    return [(proc.pid, proc.name(), proc.cpu_percent()) for proc in psutil.process_iter()]
# List all running processes and their CPU usage

Code: def check_disk_space():
    import shutil
    total, used, free = shutil.disk_usage("/")
    return {"Total": total // (1024 ** 3), "Used": used // (1024 ** 3), "Free": free // (1024 ** 3)}
# Get disk space usage in GB

Code: def monitor_cpu_usage(interval=1, duration=10):
    import psutil, time
    usage = []
    for _ in range(duration):
        usage.append(psutil.cpu_percent(interval=interval))
    return usage
# Monitor CPU usage for a given duration

Code: def get_memory_usage():
    import psutil
    mem = psutil.virtual_memory()
    return {"Total": mem.total // (1024 ** 3), "Used": mem.used // (1024 ** 3), "Free": mem.free // (1024 ** 3)}
# Get system memory usage in GB

Code: def shutdown_system():
    import os
    os.system("shutdown /s /t 0" if os.name == "nt" else "sudo shutdown -h now")
# Shut down the system

Code: def reboot_system():
    import os
    os.system("shutdown /r /t 0" if os.name == "nt" else "sudo reboot")
# Reboot the system

Code: def get_public_ip():
    import requests
    return requests.get("https://api64.ipify.org?format=json").json()["ip"]
# Get the public IP address of the machine

Code: def check_port_status(host, port):
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex((host, port))
    sock.close()
    return result == 0
# Check if a port is open on a host

Code: def scan_open_ports(host, port_range=(1, 1024)):
    import socket
    open_ports = []
    for port in range(port_range[0], port_range[1] + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        if sock.connect_ex((host, port)) == 0:
            open_ports.append(port)
        sock.close()
    return open_ports
# Scan open ports on a host

Code: def hash_file_sha256(file_path):
    import hashlib
    with open(file_path, "rb") as file:
        return hashlib.sha256(file.read()).hexdigest()
# Generate SHA-256 hash of a file

Code: def encrypt_text(text, key):
    from cryptography.fernet import Fernet
    cipher = Fernet(key)
    return cipher.encrypt(text.encode()).decode()
# Encrypt a text using Fernet encryption

Code: def decrypt_text(encrypted_text, key):
    from cryptography.fernet import Fernet
    cipher = Fernet(key)
    return cipher.decrypt(encrypted_text.encode()).decode()
# Decrypt a text using Fernet encryption

Code: def download_file(url, filename):
    import requests
    with open(filename, "wb") as file:
        file.write(requests.get(url).content)
# Download a file from a URL

Code: def ping_website(url):
    import os
    return os.system(f"ping -c 1 {url}") == 0
# Ping a website to check if it's online

Code: def list_directory_contents(path="."):
    import os
    return os.listdir(path)
# List all files and folders in a directory

Code: def check_file_exists(filepath):
    import os
    return os.path.exists(filepath)
# Check if a file exists in the system

Code: def upload_to_s3(bucket_name, file_name, aws_access_key, aws_secret_key):
    import boto3
    s3 = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    s3.upload_file(file_name, bucket_name, file_name)
    return f"File {file_name} uploaded to S3 bucket {bucket_name}"
# Upload a file to AWS S3

Code: def list_s3_buckets(aws_access_key, aws_secret_key):
    import boto3
    s3 = boto3.client('s3', aws_access_key_id=aws_access_key, aws_secret_access_key=aws_secret_key)
    return [bucket['Name'] for bucket in s3.list_buckets()['Buckets']]
# List all S3 buckets in an AWS account

Code: def get_system_info():
    import platform
    return {
        "OS": platform.system(),
        "Version": platform.version(),
        "Architecture": platform.architecture(),
    }
# Get basic system information

Code: def list_processes():
    import psutil
    return [(proc.pid, proc.name(), proc.cpu_percent()) for proc in psutil.process_iter()]
# List all running processes and their CPU usage

Code: def check_disk_space():
    import shutil
    total, used, free = shutil.disk_usage("/")
    return {"Total": total // (1024 ** 3), "Used": used // (1024 ** 3), "Free": free // (1024 ** 3)}
# Get disk space usage in GB

Code: def monitor_cpu_usage(interval=1, duration=10):
    import psutil, time
    usage = []
    for _ in range(duration):
        usage.append(psutil.cpu_percent(interval=interval))
    return usage
# Monitor CPU usage for a given duration

Code: def get_public_ip():
    import requests
    return requests.get("https://api64.ipify.org?format=json").json()["ip"]
# Get the public IP address of the machine

Code: def check_port_status(host, port):
    import socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex((host, port))
    sock.close()
    return result == 0
# Check if a port is open on a host

Code: def scan_open_ports(host, port_range=(1, 1024)):
    import socket
    open_ports = []
    for port in range(port_range[0], port_range[1] + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        if sock.connect_ex((host, port)) == 0:
            open_ports.append(port)
        sock.close()
    return open_ports
# Scan open ports on a host

Code: def hash_file_sha256(file_path):
    import hashlib
    with open(file_path, "rb") as file:
        return hashlib.sha256(file.read()).hexdigest()
# Generate SHA-256 hash of a file

Code: def encrypt_text(text, key):
    from cryptography.fernet import Fernet
    cipher = Fernet(key)
    return cipher.encrypt(text.encode()).decode()
# Encrypt a text using Fernet encryption

Code: def decrypt_text(encrypted_text, key):
    from cryptography.fernet import Fernet
    cipher = Fernet(key)
    return cipher.decrypt(encrypted_text.encode()).decode()
# Decrypt a text using Fernet encryption

Code: def download_file(url, filename):
    import requests
    with open(filename, "wb") as file:
        file.write(requests.get(url).content)
# Download a file from a URL

Code: def ping_website(url):
    import os
    return os.system(f"ping -c 1 {url}") == 0
# Ping a website to check if it's online

Code: def list_directory_contents(path="."):
    import os
    return os.listdir(path)
# List all files and folders in a directory

Code: def check_file_exists(filepath):
    import os
    return os.path.exists(filepath)
# Check if a file exists in the system

Code: def read_file_content(filepath):
    with open(filepath, "r") as file:
        return file.read()
# Read the content of a file

Code: def write_to_file(filepath, content):
    with open(filepath, "w") as file:
        file.write(content)
# Write content to a file

Code: def append_to_file(filepath, content):
    with open(filepath, "a") as file:
        file.write(content + "\n")
# Append content to a file

Code: def remove_duplicates(lst):
    return list(set(lst))
# Remove duplicate elements from a list

Code: def sort_list(lst):
    return sorted(lst)
# Sort a list in ascending order

Code: def merge_lists(lst1, lst2):
    return lst1 + lst2
# Merge two lists into one

Code: def generate_uuid():
    import uuid
    return str(uuid.uuid4())
# Generate a unique identifier (UUID)

Code: def get_weather(city, api_key):
    import requests
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
    return requests.get(url).json()
# Fetch current weather data for a city using OpenWeather API

Code: def get_currency_exchange_rate(base_currency, target_currency, api_key):
    import requests
    url = f"https://open.er-api.com/v6/latest/{base_currency}?apikey={api_key}"
    return requests.get(url).json()["rates"].get(target_currency, None)
# Fetch currency exchange rate using an API

Code: def get_random_joke():
    import requests
    return requests.get("https://official-joke-api.appspot.com/random_joke").json()
# Fetch a random joke from an API

Code: def get_bitcoin_price():
    import requests
    return requests.get("https://api.coindesk.com/v1/bpi/currentprice/BTC.json").json()["bpi"]["USD"]["rate"]
# Fetch the current price of Bitcoin in USD

Code: def scrape_wikipedia_summary(topic):
    import wikipedia
    return wikipedia.summary(topic)
# Fetch a summary of a topic from Wikipedia

Code: def get_running_services():
    import psutil
    return [service.name() for service in psutil.win_service_iter()]
# Get a list of running services (Windows only)

Code: def get_wifi_passwords():
    import os
    return os.popen("netsh wlan show profile key=clear").read()
# Retrieve saved WiFi passwords (Windows only)

Code: def create_python_virtual_env(env_name):
    import os
    os.system(f"python -m venv {env_name}")
# Create a Python virtual environment

Code: def install_python_package(package_name):
    import os
    os.system(f"pip install {package_name}")
# Install a Python package using pip

Code: def run_shell_command(command):
    import subprocess
    return subprocess.getoutput(command)
# Run a shell command and return the output

Code: def check_website_status(url):
    import requests
    return requests.get(url).status_code
# Check if a website is online

Code: def extract_emails(text):
    import re
    return re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text)
# Extract all email addresses from a text

Code: def detect_language(text):
    from langdetect import detect
    return detect(text)
# Detect the language of a given text

Code: def translate_text(text, target_lang="fr"):
    from deep_translator import GoogleTranslator
    return GoogleTranslator(source="auto", target=target_lang).translate(text)
# Translate text into another language

Code: def hash_text_sha256(text):
    import hashlib
    return hashlib.sha256(text.encode()).hexdigest()
# Generate SHA-256 hash of a given text

Code: def hash_text_md5(text):
    import hashlib
    return hashlib.md5(text.encode()).hexdigest()
# Generate MD5 hash of a given text

Code: def hash_file_sha256(file_path):
    import hashlib
    with open(file_path, "rb") as file:
        return hashlib.sha256(file.read()).hexdigest()
# Generate SHA-256 hash of a file

Code: def encrypt_text_aes(text, key):
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import pad
    cipher = AES.new(key.encode(), AES.MODE_CBC)
    encrypted = cipher.encrypt(pad(text.encode(), AES.block_size))
    return cipher.iv.hex() + encrypted.hex()
# Encrypt text using AES encryption

Code: def decrypt_text_aes(encrypted_text, key):
    from Crypto.Cipher import AES
    from Crypto.Util.Padding import unpad
    iv = bytes.fromhex(encrypted_text[:32])
    encrypted_data = bytes.fromhex(encrypted_text[32:])
    cipher = AES.new(key.encode(), AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(encrypted_data), AES.block_size).decode()
# Decrypt text encrypted with AES

Code: def generate_rsa_keys():
    from Crypto.PublicKey import RSA
    key = RSA.generate(2048)
    private_key = key.export_key().decode()
    public_key = key.publickey().export_key().decode()
    return private_key, public_key
# Generate RSA public and private keys

Code: def encrypt_rsa(public_key, message):
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP
    key = RSA.import_key(public_key)
    cipher = PKCS1_OAEP.new(key)
    return cipher.encrypt(message.encode()).hex()
# Encrypt a message using RSA public key

Code: def decrypt_rsa(private_key, encrypted_message):
    from Crypto.PublicKey import RSA
    from Crypto.Cipher import PKCS1_OAEP
    key = RSA.import_key(private_key)
    cipher = PKCS1_OAEP.new(key)
    return cipher.decrypt(bytes.fromhex(encrypted_message)).decode()
# Decrypt a message using RSA private key

Code: def check_password_strength(password):
    import re
    if (len(password) >= 8 and 
        re.search(r'[A-Z]', password) and 
        re.search(r'[a-z]', password) and 
        re.search(r'\d', password) and 
        re.search(r'[!@#$%^&*(),.?":{}|<>]', password)):
        return "Strong"
    return "Weak"
# Check the strength of a password

Code: def generate_random_password(length=12):
    import random
    import string
    chars = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(chars) for _ in range(length))
# Generate a random secure password

Code: def scan_open_ports(host, port_range=(1, 1024)):
    import socket
    open_ports = []
    for port in range(port_range[0], port_range[1] + 1):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        if sock.connect_ex((host, port)) == 0:
            open_ports.append(port)
        sock.close()
    return open_ports
# Scan open ports on a target host

Code: def detect_malware(file_path):
    import hashlib
    known_hashes = ["e99a18c428cb38d5f260853678922e03", "098f6bcd4621d373cade4e832627b4f6"]
    file_hash = hashlib.md5(open(file_path, "rb").read()).hexdigest()
    return file_hash in known_hashes
# Check if a file's hash matches known malware signatures

Code: def check_phishing_url(url):
    import requests
    response = requests.get(f"https://phish.surfshark.com/api/lookup?domain={url}")
    return response.json().get("isPhishing", False)
# Check if a URL is associated with phishing attacks

Code: def get_public_ip():
    import requests
    return requests.get("https://api64.ipify.org?format=json").json()["ip"]
# Get the public IP address of the system

Code: def detect_intrusion():
    import os
    logs = os.popen("cat /var/log/auth.log | grep 'Failed password'").read()
    return logs if logs else "No failed login attempts detected"
# Detect failed login attempts from system logs (Linux)

Code: def create_firewall_rule(port, action="allow"):
    import os
    os.system(f"sudo ufw {action} {port}")
    return f"Firewall rule {action} for port {port} applied"
# Add or remove a firewall rule for a port (Linux)

Code: def get_wifi_passwords():
    import os
    return os.popen("netsh wlan show profile key=clear").read()
# Retrieve saved WiFi passwords (Windows only)

Code: def detect_keylogger():
    import psutil
    suspicious_processes = ["keylogger.exe", "spyware.exe"]
    return any(proc.name() in suspicious_processes for proc in psutil.process_iter())
# Check for keylogger processes running on the system

Code: def brute_force_login(username, password_list, target_url):
    import requests
    for password in password_list:
        response = requests.post(target_url, data={"username": username, "password": password})
        if "Login successful" in response.text:
            return f"Valid credentials found: {username}:{password}"
    return "Brute-force attack failed"
# Perform a brute-force attack on a login page (for ethical hacking only)

Code: def monitor_network_traffic():
    import os
    return os.popen("sudo tcpdump -c 10 -nn").read()
# Capture network packets using tcpdump (Linux)

Code: def block_ip_address(ip):
    import os
    os.system(f"sudo iptables -A INPUT -s {ip} -j DROP")
    return f"IP {ip} blocked"
# Block an IP address using iptables (Linux)

Code: def unblock_ip_address(ip):
    import os
    os.system(f"sudo iptables -D INPUT -s {ip} -j DROP")
    return f"IP {ip} unblocked"
# Unblock an IP address using iptables (Linux)

Code: def detect_sql_injection(query):
    dangerous_keywords = ["'", "--", ";", "DROP", "DELETE", "INSERT"]
    return any(keyword in query.upper() for keyword in dangerous_keywords)
# Detect potential SQL injection in a query

Code: def detect_xss_attack(input_text):
    import re
    xss_patterns = [r'<script>', r'onerror=', r'javascript:']
    return any(re.search(pattern, input_text, re.IGNORECASE) for pattern in xss_patterns)
# Detect Cross-Site Scripting (XSS) attacks in user input

Code: def analyze_system_logs():
    import os
    return os.popen("tail -n 50 /var/log/syslog").read()
# Analyze recent system logs (Linux)

Code: def spoof_mac_address(new_mac):
    import os
    os.system(f"sudo ifconfig eth0 hw ether {new_mac}")
    return f"MAC address changed to {new_mac}"
# Change the MAC address of a network adapter (Linux)

Code: def list_running_services():
    import os
    return os.popen("systemctl list-units --type=service --state=running").read()
# List all running system services (Linux)

Code: def create_database(db_name):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    conn.close()
    return f"Database {db_name} created successfully"
# Create an SQLite database

Code: def create_table(db_name, table_name, columns):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    cursor = conn.cursor()
    column_definitions = ", ".join(columns)
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({column_definitions})")
    conn.commit()
    conn.close()
    return f"Table {table_name} created successfully"
# Create a table in SQLite database

Code: def insert_into_table(db_name, table_name, data):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    cursor = conn.cursor()
    placeholders = ", ".join(["?" for _ in data])
    cursor.execute(f"INSERT INTO {table_name} VALUES ({placeholders})", data)
    conn.commit()
    conn.close()
    return "Data inserted successfully"
# Insert data into an SQLite table

Code: def get_all_records(db_name, table_name):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM {table_name}")
    records = cursor.fetchall()
    conn.close()
    return records
# Fetch all records from a table

Code: def update_record(db_name, table_name, column, value, condition):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    cursor = conn.cursor()
    cursor.execute(f"UPDATE {table_name} SET {column} = ? WHERE {condition}", (value,))
    conn.commit()
    conn.close()
    return "Record updated successfully"
# Update a record in a table

Code: def delete_record(db_name, table_name, condition):
    import sqlite3
    conn = sqlite3.connect(f"{db_name}.db")
    cursor = conn.cursor()
    cursor.execute(f"DELETE FROM {table_name} WHERE {condition}")
    conn.commit()
    conn.close()
    return "Record deleted successfully"
# Delete a record from a table

Code: def create_jwt_token(payload, secret_key):
    import jwt
    return jwt.encode(payload, secret_key, algorithm="HS256")
# Generate a JWT token

Code: def verify_jwt_token(token, secret_key):
    import jwt
    try:
        return jwt.decode(token, secret_key, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        return "Token has expired"
    except jwt.InvalidTokenError:
        return "Invalid token"
# Verify and decode a JWT token

Code: def hash_password(password):
    import bcrypt
    salt = bcrypt.gensalt()
    hashed = bcrypt.hashpw(password.encode(), salt)
    return hashed.decode()
# Hash a password using bcrypt

Code: def verify_password(password, hashed_password):
    import bcrypt
    return bcrypt.checkpw(password.encode(), hashed_password.encode())
# Verify a hashed password

Code: def create_api_endpoint():
    from flask import Flask, jsonify

    app = Flask(__name__)

    @app.route("/api", methods=["GET"])
    def api():
        return jsonify({"message": "Hello, API!"})

    app.run(debug=True)
# Create a simple API endpoint using Flask

Code: def start_fastapi_server():
    from fastapi import FastAPI

    app = FastAPI()

    @app.get("/")
    def read_root():
        return {"message": "Hello, FastAPI!"}

    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
# Create a simple FastAPI server

Code: def connect_to_redis():
    import redis
    return redis.Redis(host='localhost', port=6379, db=0)
# Connect to Redis database

Code: def cache_data(redis_client, key, value, expiration=3600):
    redis_client.setex(key, expiration, value)
    return "Data cached successfully"
# Store data in Redis with expiration time

Code: def get_cached_data(redis_client, key):
    return redis_client.get(key)
# Retrieve data from Redis cache

Code: def send_email(smtp_server, port, sender, password, receiver, subject, message):
    import smtplib
    from email.mime.text import MIMEText
    msg = MIMEText(message)
    msg["Subject"] = subject
    msg["From"] = sender
    msg["To"] = receiver
    with smtplib.SMTP_SSL(smtp_server, port) as server:
        server.login(sender, password)
        server.sendmail(sender, receiver, msg.as_string())
# Send an email using SMTP

Code: def schedule_task(interval_seconds, task_function):
    import time
    while True:
        task_function()
        time.sleep(interval_seconds)
# Schedule a background task to run periodically

Code: def upload_file_to_server(file, save_path):
    with open(save_path, "wb") as f:
        f.write(file.read())
    return f"File saved to {save_path}"
# Save an uploaded file to a server

Code: def resize_image(image_path, width, height, output_path):
    from PIL import Image
    img = Image.open(image_path)
    img = img.resize((width, height))
    img.save(output_path)
# Resize an image before serving it

Code: def generate_qr_code(data, filename):
    import qrcode
    img = qrcode.make(data)
    img.save(filename)
# Generate a QR code from text data

Code: def handle_user_session(user_id, session_store):
    session_store[user_id] = {"logged_in": True}
    return session_store[user_id]
# Handle user session management in a backend system

Code: def generate_sitemap(domain, urls):
    sitemap = f"<?xml version='1.0' encoding='UTF-8'?>\n<urlset xmlns='http://www.sitemaps.org/schemas/sitemap/0.9'>"
    for url in urls:
        sitemap += f"<url><loc>{domain}/{url}</loc></url>"
    sitemap += "</urlset>"
    return sitemap
# Generate an XML sitemap for SEO

Code: def log_request_info(request):
    return {
        "method": request.method,
        "url": request.url,
        "headers": dict(request.headers),
    }
# Log incoming request details

Code: def set_cors_headers(response):
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "GET,POST,PUT,DELETE"
    return response
# Set CORS headers for API responses

Code: def rate_limit_request(client_ip, redis_client, max_requests=5, time_window=60):
    key = f"rate_limit:{client_ip}"
    count = redis_client.incr(key)
    if count == 1:
        redis_client.expire(key, time_window)
    return count <= max_requests
# Implement rate limiting using Redis

Code: def paginate_query(queryset, page, per_page):
    total_items = len(queryset)
    start = (page - 1) * per_page
    end = start + per_page
    return {"data": queryset[start:end], "total": total_items, "page": page}
# Implement simple pagination for database queries

Code: def validate_json_request(request, required_keys):
    data = request.json
    missing_keys = [key for key in required_keys if key not in data]
    if missing_keys:
        return {"error": f"Missing keys: {missing_keys}"}, 400
    return data
# Validate JSON request body in an API

Code: def generate_api_key():
    import secrets
    return secrets.token_hex(32)
# Generate a random API key for authentication

Code: def verify_api_key(api_key, valid_keys):
    return api_key in valid_keys
# Verify API key authentication

Code: def create_task_queue():
    from queue import Queue
    return Queue()
# Create a simple in-memory task queue

Code: def add_task_to_queue(queue, task):
    queue.put(task)
    return "Task added to queue"
# Add a task to a queue for background processing

Code: def connect_to_postgresql(dbname, user, password, host="localhost", port=5432):
    import psycopg2
    conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host, port=port)
    return conn
# Connect to a PostgreSQL database

Code: def create_postgresql_table(conn, table_name, columns):
    cursor = conn.cursor()
    column_definitions = ", ".join(columns)
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_name} ({column_definitions});")
    conn.commit()
    cursor.close()
# Create a table in PostgreSQL

Code: def insert_postgresql_record(conn, table_name, data):
    cursor = conn.cursor()
    placeholders = ", ".join(["%s"] * len(data))
    cursor.execute(f"INSERT INTO {table_name} VALUES ({placeholders})", data)
    conn.commit()
    cursor.close()
# Insert a record into a PostgreSQL table

Code: def fetch_postgresql_records(conn, table_name):
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM {table_name}")
    records = cursor.fetchall()
    cursor.close()
    return records
# Fetch all records from a PostgreSQL table

Code: def hash_password_sha256(password):
    import hashlib
    return hashlib.sha256(password.encode()).hexdigest()
# Hash a password using SHA-256

Code: def generate_auth_token(user_id, secret_key):
    import jwt
    import datetime
    payload = {"user_id": user_id, "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)}
    return jwt.encode(payload, secret_key, algorithm="HS256")
# Generate a JWT authentication token

Code: def verify_auth_token(token, secret_key):
    import jwt
    try:
        return jwt.decode(token, secret_key, algorithms=["HS256"])
    except jwt.ExpiredSignatureError:
        return "Token expired"
    except jwt.InvalidTokenError:
        return "Invalid token"
# Verify a JWT authentication token

Code: def start_flask_server():
    from flask import Flask

    app = Flask(__name__)

    @app.route("/")
    def home():
        return "Flask Backend Running!"

    app.run(debug=True)
# Start a simple Flask server

Code: def log_api_request(request):
    return {
        "method": request.method,
        "url": request.url,
        "headers": dict(request.headers),
        "body": request.get_json() if request.is_json else None
    }
# Log API request details

Code: def validate_request_params(request, required_params):
    data = request.get_json()
    missing_params = [param for param in required_params if param not in data]
    if missing_params:
        return {"error": f"Missing parameters: {missing_params}"}, 400
    return data
# Validate request parameters for an API

Code: def implement_caching(redis_client, key, function, *args, **kwargs):
    if redis_client.exists(key):
        return redis_client.get(key)
    result = function(*args, **kwargs)
    redis_client.set(key, result, ex=3600)
    return result
# Implement caching with Redis

Code: def clear_cache(redis_client, key):
    redis_client.delete(key)
    return f"Cache cleared for {key}"
# Clear cache for a specific key

Code: def get_external_ip():
    import requests
    return requests.get("https://api64.ipify.org?format=json").json()["ip"]
# Get the public IP address of the server

Code: def scrape_website_content(url):
    import requests
    from bs4 import BeautifulSoup
    page = requests.get(url).text
    return BeautifulSoup(page, "html.parser").get_text()
# Scrape text content from a website

Code: def get_sitemap(url):
    import requests
    return requests.get(f"{url}/sitemap.xml").text
# Fetch a website's sitemap

Code: def detect_sql_injection(input_text):
    dangerous_keywords = ["'", "--", ";", "DROP", "DELETE", "INSERT"]
    return any(keyword in input_text.upper() for keyword in dangerous_keywords)
# Detect possible SQL injection in user input

Code: def block_ip_iptables(ip):
    import os
    os.system(f"sudo iptables -A INPUT -s {ip} -j DROP")
    return f"Blocked IP: {ip}"
# Block an IP address using iptables

Code: def unblock_ip_iptables(ip):
    import os
    os.system(f"sudo iptables -D INPUT -s {ip} -j DROP")
    return f"Unblocked IP: {ip}"
# Unblock an IP address using iptables

Code: def encrypt_api_key(api_key, secret):
    from cryptography.fernet import Fernet
    cipher = Fernet(secret)
    return cipher.encrypt(api_key.encode()).decode()
# Encrypt an API key using Fernet encryption

Code: def decrypt_api_key(encrypted_key, secret):
    from cryptography.fernet import Fernet
    cipher = Fernet(secret)
    return cipher.decrypt(encrypted_key.encode()).decode()
# Decrypt an API key using Fernet encryption

Code: def rate_limit(api_client, client_ip, redis_client, limit=5, window=60):
    key = f"rate_limit:{client_ip}"
    count = redis_client.incr(key)
    if count == 1:
        redis_client.expire(key, window)
    return count <= limit
# Implement API rate limiting using Redis

Code: def schedule_background_task(task_function, interval):
    import time
    while True:
        task_function()
        time.sleep(interval)
# Schedule a background task to run at a fixed interval

Code: def fetch_github_repos(username):
    import requests
    url = f"https://api.github.com/users/{username}/repos"
    return requests.get(url).json()
# Fetch public GitHub repositories of a user

Code: def get_weather_data(city, api_key):
    import requests
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}"
    return requests.get(url).json()
# Fetch weather data from OpenWeather API

Code: def create_payment_intent(stripe_secret, amount, currency="usd"):
    import stripe
    stripe.api_key = stripe_secret
    return stripe.PaymentIntent.create(amount=amount, currency=currency)
# Create a payment intent using Stripe API

Code: def verify_payment_intent(stripe_secret, payment_intent_id):
    import stripe
    stripe.api_key = stripe_secret
    return stripe.PaymentIntent.retrieve(payment_intent_id)
# Verify a payment intent in Stripe

Code: def backup_database(db_name, backup_file):
    import os
    os.system(f"sqlite3 {db_name}.db .dump > {backup_file}")
    return f"Backup created: {backup_file}"
# Backup an SQLite database

Code: def restore_database(db_name, backup_file):
    import os
    os.system(f"sqlite3 {db_name}.db < {backup_file}")
    return f"Database restored from {backup_file}"
# Restore an SQLite database from a backup

Code: def delete_old_logs(log_directory, days=30):
    import os
    import time
    threshold = time.time() - (days * 86400)
    for file in os.listdir(log_directory):
        file_path = os.path.join(log_directory, file)
        if os.path.isfile(file_path) and os.path.getmtime(file_path) < threshold:
            os.remove(file_path)
# Delete old log files older than a certain number of days

Code: def list_active_sessions():
    import os
    return os.popen("who").read()
# List active user sessions on a server

Code: def send_slack_notification(webhook_url, message):
    import requests
    return requests.post(webhook_url, json={"text": message}).json()
# Send a Slack notification via webhook

Code: def get_server_uptime():
    import os
    return os.popen("uptime -p").read()
# Get server uptime

Code: def restart_service(service_name):
    import os
    os.system(f"sudo systemctl restart {service_name}")
    return f"Service {service_name} restarted"
# Restart a system service

Code: def create_file(filename, content):
    with open(filename, "w") as file:
        file.write(content)
    return f"File {filename} created"
# Create a file and write content to it

Code: def check_system_uptime():
    import os
    return os.popen("uptime -p").read().strip()
# Check how long the system has been running

Code: def restart_server():
    import os
    os.system("sudo reboot")
    return "Server is restarting..."
# Restart the server

Code: def get_cpu_usage():
    import psutil
    return psutil.cpu_percent(interval=1)
# Get CPU usage in percentage

Code: def get_memory_usage():
    import psutil
    mem = psutil.virtual_memory()
    return {"Total": mem.total // (1024 ** 3), "Used": mem.used // (1024 ** 3), "Free": mem.free // (1024 ** 3)}
# Get memory usage in GB

Code: def get_disk_usage():
    import shutil
    total, used, free = shutil.disk_usage("/")
    return {"Total": total // (1024 ** 3), "Used": used // (1024 ** 3), "Free": free // (1024 ** 3)}
# Get disk usage in GB

Code: def list_running_processes():
    import psutil
    return [(proc.pid, proc.name()) for proc in psutil.process_iter()]
# List all running processes on the system

Code: def start_docker_container(image, container_name):
    import os
    os.system(f"docker run -d --name {container_name} {image}")
    return f"Container {container_name} started from image {image}"
# Start a Docker container

Code: def stop_docker_container(container_name):
    import os
    os.system(f"docker stop {container_name}")
    return f"Container {container_name} stopped"
# Stop a running Docker container

Code: def remove_docker_container(container_name):
    import os
    os.system(f"docker rm {container_name}")
    return f"Container {container_name} removed"
# Remove a Docker container

Code: def list_docker_containers():
    import os
    return os.popen("docker ps -a").read()
# List all running and stopped Docker containers

Code: def list_docker_images():
    import os
    return os.popen("docker images").read()
# List all available Docker images

Code: def build_docker_image(dockerfile_path, tag):
    import os
    os.system(f"docker build -t {tag} {dockerfile_path}")
    return f"Docker image {tag} built successfully"
# Build a Docker image from a Dockerfile

Code: def push_docker_image(image, registry):
    import os
    os.system(f"docker tag {image} {registry}/{image}")
    os.system(f"docker push {registry}/{image}")
    return f"Image {image} pushed to {registry}"
# Push a Docker image to a container registry

Code: def pull_docker_image(image):
    import os
    os.system(f"docker pull {image}")
    return f"Docker image {image} pulled successfully"
# Pull a Docker image from a registry

Code: def deploy_kubernetes_pod(pod_yaml):
    import os
    os.system(f"kubectl apply -f {pod_yaml}")
    return "Kubernetes pod deployed successfully"
# Deploy a pod to a Kubernetes cluster

Code: def delete_kubernetes_pod(pod_name):
    import os
    os.system(f"kubectl delete pod {pod_name}")
    return f"Pod {pod_name} deleted"
# Delete a Kubernetes pod

Code: def list_kubernetes_pods():
    import os
    return os.popen("kubectl get pods").read()
# List all running Kubernetes pods

Code: def restart_kubernetes_pod(pod_name):
    import os
    os.system(f"kubectl delete pod {pod_name} && kubectl apply -f {pod_name}.yaml")
    return f"Pod {pod_name} restarted"
# Restart a Kubernetes pod

Code: def get_kubernetes_pod_logs(pod_name):
    import os
    return os.popen(f"kubectl logs {pod_name}").read()
# Get logs from a Kubernetes pod

Code: def deploy_helm_chart(chart_path, release_name, namespace="default"):
    import os
    os.system(f"helm install {release_name} {chart_path} --namespace {namespace}")
    return f"Helm chart {release_name} deployed"
# Deploy a Helm chart

Code: def delete_helm_release(release_name, namespace="default"):
    import os
    os.system(f"helm uninstall {release_name} --namespace {namespace}")
    return f"Helm release {release_name} deleted"
# Delete a Helm release

Code: def check_service_status(service_name):
    import os
    return os.popen(f"systemctl is-active {service_name}").read().strip()
# Check if a service is running

Code: def restart_service(service_name):
    import os
    os.system(f"sudo systemctl restart {service_name}")
    return f"Service {service_name} restarted"
# Restart a system service

Code: def list_system_services():
    import os
    return os.popen("systemctl list-units --type=service --state=running").read()
# List all running services

Code: def add_firewall_rule(port):
    import os
    os.system(f"sudo ufw allow {port}")
    return f"Firewall rule added for port {port}"
# Add a firewall rule

Code: def remove_firewall_rule(port):
    import os
    os.system(f"sudo ufw deny {port}")
    return f"Firewall rule removed for port {port}"
# Remove a firewall rule

Code: def update_system_packages():
    import os
    os.system("sudo apt update && sudo apt upgrade -y")
    return "System packages updated successfully"
# Update system packages

Code: def install_package(package_name):
    import os
    os.system(f"sudo apt install -y {package_name}")
    return f"Package {package_name} installed successfully"
# Install a package using the package manager

Code: def uninstall_package(package_name):
    import os
    os.system(f"sudo apt remove -y {package_name}")
    return f"Package {package_name} removed successfully"
# Uninstall a package using the package manager

Code: def fetch_log_entries(log_file, num_lines=10):
    import os
    return os.popen(f"tail -n {num_lines} {log_file}").read()
# Fetch recent log entries

Code: def archive_logs(log_directory, archive_name):
    import os
    os.system(f"tar -czvf {archive_name}.tar.gz {log_directory}")
    return f"Logs archived to {archive_name}.tar.gz"
# Archive log files

Code: def check_load_average():
    import os
    return os.popen("uptime").read().split("load average:")[1].strip()
# Check system load average

Code: def restart_nginx():
    import os
    os.system("sudo systemctl restart nginx")
    return "Nginx restarted"
# Restart the Nginx web server

Code: def restart_apache():
    import os
    os.system("sudo systemctl restart apache2")
    return "Apache restarted"
# Restart the Apache web server

Code: def start_background_process(command):
    import subprocess
    subprocess.Popen(command, shell=True)
    return "Background process started"
# Start a background process

Code: def stop_background_process(pid):
    import os
    os.system(f"kill {pid}")
    return f"Process {pid} stopped"
# Stop a background process

Code: def sync_files(source, destination):
    import os
    os.system(f"rsync -av {source} {destination}")
    return f"Files synced from {source} to {destination}"
# Synchronize files between directories

Code: def fetch_git_repository(repo_url, destination):
    import os
    os.system(f"git clone {repo_url} {destination}")
    return f"Repository cloned to {destination}"
# Clone a Git repository

Code: def update_git_repository(repo_path):
    import os
    os.system(f"cd {repo_path} && git pull")
    return f"Repository at {repo_path} updated"
# Update a Git repository

Code: def install_apk(device_id, apk_path):
    import os
    os.system(f"adb -s {device_id} install {apk_path}")
    return f"APK installed on device {device_id}"
# Install an APK on an Android device

Code: def uninstall_app(device_id, package_name):
    import os
    os.system(f"adb -s {device_id} uninstall {package_name}")
    return f"App {package_name} uninstalled from device {device_id}"
# Uninstall an app from an Android device

Code: def list_installed_apps(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell pm list packages").read()
# List all installed apps on an Android device

Code: def start_app(device_id, package_name):
    import os
    os.system(f"adb -s {device_id} shell monkey -p {package_name} -c android.intent.category.LAUNCHER 1")
    return f"App {package_name} started on device {device_id}"
# Start an Android app

Code: def stop_app(device_id, package_name):
    import os
    os.system(f"adb -s {device_id} shell am force-stop {package_name}")
    return f"App {package_name} stopped on device {device_id}"
# Stop an Android app

Code: def take_screenshot(device_id, save_path):
    import os
    os.system(f"adb -s {device_id} shell screencap -p /sdcard/screenshot.png")
    os.system(f"adb -s {device_id} pull /sdcard/screenshot.png {save_path}")
    return f"Screenshot saved at {save_path}"
# Take a screenshot on an Android device

Code: def record_screen(device_id, duration, save_path):
    import os
    os.system(f"adb -s {device_id} shell screenrecord --time-limit {duration} /sdcard/screen.mp4")
    os.system(f"adb -s {device_id} pull /sdcard/screen.mp4 {save_path}")
    return f"Screen recording saved at {save_path}"
# Record the screen on an Android device

Code: def get_device_info(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell getprop").read()
# Get system properties of an Android device

Code: def list_connected_devices():
    import os
    return os.popen("adb devices").read()
# List all connected Android devices

Code: def reboot_device(device_id):
    import os
    os.system(f"adb -s {device_id} reboot")
    return f"Device {device_id} rebooted"
# Reboot an Android device

Code: def clear_app_data(device_id, package_name):
    import os
    os.system(f"adb -s {device_id} shell pm clear {package_name}")
    return f"Cleared data of {package_name}"
# Clear an app's data on an Android device

Code: def pull_file_from_device(device_id, remote_path, local_path):
    import os
    os.system(f"adb -s {device_id} pull {remote_path} {local_path}")
    return f"File pulled to {local_path}"
# Pull a file from an Android device

Code: def push_file_to_device(device_id, local_path, remote_path):
    import os
    os.system(f"adb -s {device_id} push {local_path} {remote_path}")
    return f"File pushed to {remote_path}"
# Push a file to an Android device

Code: def get_battery_status(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell dumpsys battery").read()
# Get battery status of an Android device

Code: def check_wifi_status(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell dumpsys wifi").read()
# Get Wi-Fi status of an Android device

Code: def enable_wifi(device_id):
    import os
    os.system(f"adb -s {device_id} shell svc wifi enable")
    return "Wi-Fi enabled"
# Enable Wi-Fi on an Android device

Code: def disable_wifi(device_id):
    import os
    os.system(f"adb -s {device_id} shell svc wifi disable")
    return "Wi-Fi disabled"
# Disable Wi-Fi on an Android device

Code: def check_mobile_data_status(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell settings get global mobile_data").read().strip()
# Check mobile data status

Code: def enable_mobile_data(device_id):
    import os
    os.system(f"adb -s {device_id} shell svc data enable")
    return "Mobile data enabled"
# Enable mobile data

Code: def disable_mobile_data(device_id):
    import os
    os.system(f"adb -s {device_id} shell svc data disable")
    return "Mobile data disabled"
# Disable mobile data

Code: def get_logcat_logs(device_id, save_path):
    import os
    os.system(f"adb -s {device_id} logcat -d > {save_path}")
    return f"Logcat logs saved to {save_path}"
# Get logcat logs from an Android device

Code: def run_ui_automator_test(device_id, test_class):
    import os
    os.system(f"adb -s {device_id} shell am instrument -w -r -e class {test_class} com.example.tests/androidx.test.runner.AndroidJUnitRunner")
    return "UI Automator test executed"
# Run a UI Automator test on an Android device

Code: def check_firebase_push_notifications():
    import requests
    url = "https://fcm.googleapis.com/fcm/send"
    headers = {
        "Authorization": "key=YOUR_FIREBASE_SERVER_KEY",
        "Content-Type": "application/json"
    }
    data = {
        "to": "/topics/all",
        "notification": {
            "title": "Test Notification",
            "body": "This is a test notification"
        }
    }
    return requests.post(url, json=data, headers=headers).json()
# Send a test push notification using Firebase Cloud Messaging (FCM)

Code: def list_permissions(device_id, package_name):
    import os
    return os.popen(f"adb -s {device_id} shell dumpsys package {package_name}").read()
# List all permissions for an installed app

Code: def grant_permission(device_id, package_name, permission):
    import os
    os.system(f"adb -s {device_id} shell pm grant {package_name} {permission}")
    return f"Permission {permission} granted to {package_name}"
# Grant a specific permission to an app

Code: def revoke_permission(device_id, package_name, permission):
    import os
    os.system(f"adb -s {device_id} shell pm revoke {package_name} {permission}")
    return f"Permission {permission} revoked from {package_name}"
# Revoke a specific permission from an app

Code: def check_screen_state(device_id):
    import os
    return os.popen(f"adb -s {device_id} shell dumpsys display").read()
# Check if the screen is on or off

Code: def turn_off_screen(device_id):
    import os
    os.system(f"adb -s {device_id} shell input keyevent 26")
    return "Screen turned off"
# Turn off the screen

Code: def turn_on_screen(device_id):
    import os
    os.system(f"adb -s {device_id} shell input keyevent 26")
    return "Screen turned on"
# Turn on the screen

Code: def simulate_keypress(device_id, keycode):
    import os
    os.system(f"adb -s {device_id} shell input keyevent {keycode}")
    return f"Keypress {keycode} simulated"
# Simulate a key press on an Android device

Code: def simulate_swipe(device_id, x1, y1, x2, y2, duration=500):
    import os
    os.system(f"adb -s {device_id} shell input swipe {x1} {y1} {x2} {y2} {duration}")
    return "Swipe gesture simulated"
# Simulate a swipe gesture on an Android device

Code: def tokenize_text(text):
    import nltk
    nltk.download('punkt')
    return nltk.word_tokenize(text)
# Tokenize a text into words

Code: def remove_stopwords(text):
    import nltk
    from nltk.corpus import stopwords
    nltk.download('stopwords')
    words = nltk.word_tokenize(text)
    return [word for word in words if word.lower() not in stopwords.words('english')]
# Remove stopwords from a text

Code: def stem_words(text):
    from nltk.stem import PorterStemmer
    words = text.split()
    ps = PorterStemmer()
    return [ps.stem(word) for word in words]
# Perform stemming on words

Code: def lemmatize_words(text):
    import nltk
    from nltk.stem import WordNetLemmatizer
    nltk.download('wordnet')
    nltk.download('omw-1.4')
    words = text.split()
    lemmatizer = WordNetLemmatizer()
    return [lemmatizer.lemmatize(word) for word in words]
# Perform lemmatization on words

Code: def count_words(text):
    return len(text.split())
# Count the number of words in a text

Code: def count_unique_words(text):
    return len(set(text.split()))
# Count the number of unique words in a text

Code: def detect_language(text):
    from langdetect import detect
    return detect(text)
# Detect the language of a given text

Code: def translate_text(text, target_language):
    from deep_translator import GoogleTranslator
    return GoogleTranslator(source='auto', target=target_language).translate(text)
# Translate text to a specified language using Google Translator

Code: def get_text_summary(text, num_sentences=3):
    from gensim.summarization import summarize
    return summarize(text, word_count=num_sentences)
# Generate a summary of a given text

Code: def get_text_sentiment(text):
    from textblob import TextBlob
    return TextBlob(text).sentiment.polarity
# Perform sentiment analysis on a text

Code: def extract_named_entities(text):
    import spacy
    nlp = spacy.load("en_core_web_sm")
    doc = nlp(text)
    return [(ent.text, ent.label_) for ent in doc.ents]
# Extract named entities from text using spaCy

Code: def correct_spelling(text):
    from textblob import TextBlob
    return str(TextBlob(text).correct())
# Correct spelling in a text

Code: def generate_ngrams(text, n=2):
    from nltk import ngrams
    words = text.split()
    return list(ngrams(words, n))
# Generate n-grams from a text

Code: def extract_keywords(text, num_keywords=5):
    from rake_nltk import Rake
    r = Rake()
    r.extract_keywords_from_text(text)
    return r.get_ranked_phrases()[:num_keywords]
# Extract important keywords from a text

Code: def calculate_tf_idf(texts):
    from sklearn.feature_extraction.text import TfidfVectorizer
    vectorizer = TfidfVectorizer()
    return vectorizer.fit_transform(texts).toarray()
# Compute TF-IDF for a list of texts

Code: def remove_punctuation(text):
    import string
    return text.translate(str.maketrans('', '', string.punctuation))
# Remove punctuation from a text

Code: def check_text_similarity(text1, text2):
    from difflib import SequenceMatcher
    return SequenceMatcher(None, text1, text2).ratio()
# Compute similarity between two texts

Code: def summarize_text_with_huggingface(text):
    from transformers import pipeline
    summarizer = pipeline("summarization")
    return summarizer(text, max_length=130, min_length=30, do_sample=False)[0]['summary_text']
# Summarize text using a Hugging Face model

Code: def classify_text_with_huggingface(text):
    from transformers import pipeline
    classifier = pipeline("zero-shot-classification")
    labels = ["positive", "negative", "neutral"]
    return classifier(text, candidate_labels=labels)
# Perform text classification using a Hugging Face model

Code: def detect_text_emotion(text):
    from transformers import pipeline
    emotion_classifier = pipeline("text-classification", model="bhadresh-savani/distilbert-base-uncased-emotion")
    return emotion_classifier(text)
# Detect emotions in a text

Code: def get_sentence_similarity(sentence1, sentence2):
    import spacy
    nlp = spacy.load("en_core_web_md")
    return nlp(sentence1).similarity(nlp(sentence2))
# Compute similarity between two sentences

Code: def segment_text_into_sentences(text):
    import nltk
    nltk.download('punkt')
    return nltk.sent_tokenize(text)
# Segment a text into sentences

Code: def extract_hashtags(text):
    import re
    return re.findall(r"#(\w+)", text)
# Extract hashtags from a text

Code: def extract_mentions(text):
    import re
    return re.findall(r"@(\w+)", text)
# Extract mentions from a text

Code: def anonymize_text(text):
    import re
    text = re.sub(r"\b[A-Z][a-z]+ [A-Z][a-z]+\b", "[REDACTED]", text)
    text = re.sub(r"\d{3}-\d{2}-\d{4}", "[REDACTED]", text)
    return text
# Anonymize personal names and sensitive data

Code: def word_cloud_from_text(text):
    from wordcloud import WordCloud
    import matplotlib.pyplot as plt
    wordcloud = WordCloud(width=800, height=400, background_color="white").generate(text)
    plt.figure(figsize=(10, 5))
    plt.imshow(wordcloud, interpolation="bilinear")
    plt.axis("off")
    plt.show()
# Generate a word cloud from text

Code: def get_part_of_speech_tags(text):
    import nltk
    nltk.download('averaged_perceptron_tagger')
    words = nltk.word_tokenize(text)
    return nltk.pos_tag(words)
# Perform part-of-speech tagging on text

Code: def convert_text_to_speech(text, output_file="output.mp3"):
    from gtts import gTTS
    tts = gTTS(text)
    tts.save(output_file)
# Convert text to speech and save as an audio file

Code: def extract_numbers_from_text(text):
    import re
    return re.findall(r"\d+", text)
# Extract numbers from a text

Code: def detect_stopword_usage(text):
    import nltk
    from nltk.corpus import stopwords
    nltk.download('stopwords')
    words = text.split()
    return [word for word in words if word.lower() in stopwords.words('english')]
# Identify stopwords in a text

Code: def detect_passive_voice(text):
    import re
    return bool(re.search(r"(\bwas\b|\bwere\b|\bbeen\b) [a-zA-Z]+ed\b", text))
# Detect passive voice in a text

Code: def extract_email_addresses(text):
    import re
    return re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text)
# Extract email addresses from text

Code: def count_syllables_in_text(text):
    import nltk
    nltk.download('cmudict')
    from nltk.corpus import cmudict
    d = cmudict.dict()
    words = text.split()
    return sum([len(d[word.lower()][0]) for word in words if word.lower() in d])
# Count the total number of syllables in a text

Code: def recognize_speech_from_mic():
    import speech_recognition as sr
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        audio = recognizer.listen(source)
    return recognizer.recognize_google(audio)
# Recognize speech from microphone input using Google Speech API

Code: def recognize_speech_from_file(audio_file):
    import speech_recognition as sr
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file) as source:
        audio = recognizer.record(source)
    return recognizer.recognize_google(audio)
# Recognize speech from an audio file

Code: def save_text_to_speech(text, output_file):
    from gtts import gTTS
    tts = gTTS(text)
    tts.save(output_file)
# Convert text to speech and save it as an audio file

Code: def play_audio_file(file_path):
    import simpleaudio as sa
    wave_obj = sa.WaveObject.from_wave_file(file_path)
    play_obj = wave_obj.play()
    play_obj.wait_done()
# Play an audio file

Code: def change_audio_speed(input_file, output_file, speed_factor):
    from pydub import AudioSegment
    sound = AudioSegment.from_file(input_file)
    faster_sound = sound.speedup(playback_speed=speed_factor)
    faster_sound.export(output_file, format="wav")
# Change the speed of an audio file

Code: def change_audio_volume(input_file, output_file, gain):
    from pydub import AudioSegment
    sound = AudioSegment.from_file(input_file)
    louder_sound = sound + gain
    louder_sound.export(output_file, format="wav")
# Increase or decrease the volume of an audio file

Code: def detect_silence_in_audio(audio_file, silence_thresh=-40, min_silence_len=500):
    from pydub import AudioSegment, silence
    sound = AudioSegment.from_file(audio_file)
    return silence.detect_silence(sound, min_silence_len=min_silence_len, silence_thresh=silence_thresh)
# Detect silent segments in an audio file

Code: def remove_silence_from_audio(input_file, output_file, silence_thresh=-40, min_silence_len=500):
    from pydub import AudioSegment, silence
    sound = AudioSegment.from_file(input_file)
    non_silent_chunks = silence.split_on_silence(sound, min_silence_len=min_silence_len, silence_thresh=silence_thresh)
    final_audio = sum(non_silent_chunks)
    final_audio.export(output_file, format="wav")
# Remove silence from an audio file

Code: def convert_mp3_to_wav(mp3_file, wav_file):
    from pydub import AudioSegment
    sound = AudioSegment.from_mp3(mp3_file)
    sound.export(wav_file, format="wav")
# Convert an MP3 file to WAV format

Code: def merge_audio_files(audio_files, output_file):
    from pydub import AudioSegment
    combined = AudioSegment.empty()
    for file in audio_files:
        combined += AudioSegment.from_file(file)
    combined.export(output_file, format="wav")
# Merge multiple audio files into one

Code: def split_audio_by_duration(input_file, output_dir, segment_length=10):
    from pydub import AudioSegment
    sound = AudioSegment.from_file(input_file)
    for i in range(0, len(sound), segment_length * 1000):
        segment = sound[i:i + (segment_length * 1000)]
        segment.export(f"{output_dir}/segment_{i//1000}.wav", format="wav")
# Split an audio file into smaller segments

Code: def detect_voice_activity(audio_file):
    import webrtcvad
    import wave
    vad = webrtcvad.Vad(3)
    with wave.open(audio_file, "rb") as wf:
        raw_audio = wf.readframes(wf.getnframes())
    return vad.is_speech(raw_audio, wf.getframerate())
# Detect if an audio file contains speech

Code: def apply_noise_reduction(input_file, output_file):
    import noisereduce as nr
    import librosa
    import soundfile as sf
    y, sr = librosa.load(input_file, sr=None)
    reduced_noise = nr.reduce_noise(y=y, sr=sr)
    sf.write(output_file, reduced_noise, sr)
# Reduce background noise in an audio file

Code: def generate_spectrogram(audio_file, output_image):
    import librosa
    import librosa.display
    import matplotlib.pyplot as plt
    y, sr = librosa.load(audio_file)
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(librosa.amplitude_to_db(librosa.stft(y), ref=np.max), sr=sr, x_axis='time', y_axis='log')
    plt.colorbar(format='%+2.0f dB')
    plt.savefig(output_image)
# Generate a spectrogram from an audio file

Code: def transcribe_audio_whisper(audio_file):
    import whisper
    model = whisper.load_model("base")
    return model.transcribe(audio_file)["text"]
# Transcribe audio using OpenAI Whisper model

Code: def detect_gender_from_voice(audio_file):
    from speechbrain.pretrained import SpeakerRecognition
    model = SpeakerRecognition.from_hparams(source="speechbrain/spkrec-ecapa-voxceleb", savedir="tmp")
    return model.classify_file(audio_file)
# Detect gender from a voice recording

Code: def detect_language_from_voice(audio_file):
    import whisper
    model = whisper.load_model("base")
    return model.transcribe(audio_file)["language"]
# Detect the language spoken in an audio file

Code: def create_voice_assistant():
    import speech_recognition as sr
    import pyttsx3
    recognizer = sr.Recognizer()
    engine = pyttsx3.init()

    while True:
        with sr.Microphone() as source:
            print("Listening...")
            audio = recognizer.listen(source)
        try:
            command = recognizer.recognize_google(audio)
            print(f"You said: {command}")
            engine.say(f"You said: {command}")
            engine.runAndWait()
        except:
            print("Sorry, I didn't understand that.")
# Create a simple voice assistant

Code: def compare_voices(file1, file2):
    from speechbrain.pretrained import SpeakerRecognition
    model = SpeakerRecognition.from_hparams(source="speechbrain/spkrec-ecapa-voxceleb", savedir="tmp")
    return model.verify_files(file1, file2)
# Compare two voice recordings to determine if they are from the same person

Code: def detect_emotion_in_voice(audio_file):
    from transformers import pipeline
    classifier = pipeline("text-classification", model="bhadresh-savani/distilbert-base-uncased-emotion")
    transcript = transcribe_audio_whisper(audio_file)
    return classifier(transcript)
# Detect emotions in a voice recording using AI

Code: def extract_text_from_speech(audio_file):
    import speech_recognition as sr
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file) as source:
        audio = recognizer.record(source)
    return recognizer.recognize_google(audio)
# Extract text from speech in an audio file

Code: def voice_to_morse_code(audio_file):
    text = extract_text_from_speech(audio_file)
    morse_dict = { "A":".-", "B":"-...", "C":"-.-.", "D":"-..", "E":".", "F":"..-.", "G":"--.", "H":"....", "I":"..", "J":".---",
                   "K":"-.-", "L":".-..", "M":"--", "N":"-.", "O":"---", "P":".--.", "Q":"--.-", "R":".-.", "S":"...", "T":"-",
                   "U":"..-", "V":"...-", "W":".--", "X":"-..-", "Y":"-.--", "Z":"--.." }
    return " ".join(morse_dict.get(char.upper(), char) for char in text)
# Convert voice speech to Morse code


